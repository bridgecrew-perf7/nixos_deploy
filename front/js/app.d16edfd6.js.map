{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/views/Login.vue?4412","webpack:///./src/App.vue?99f3","webpack:///./src/assets/logo_round.png","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/registerServiceWorker.ts","webpack:///./src/views/Home.vue","webpack:///./properties.ts","webpack:///./src/services/api/openApi/base.ts","webpack:///./src/services/api/openApi/common.ts","webpack:///./src/services/api/openApi/api.ts","webpack:///./src/services/api/apis.ts","webpack:///./src/store/index.ts","webpack:///./src/utils/Time.ts","webpack:///./src/services/AccountService.ts","webpack:///./src/services/BudgetService.ts","webpack:///./src/services/CategoryService.ts","webpack:///./src/services/MasterCategoryService.ts","webpack:///./src/store/StoreHandler.ts","webpack:///./src/components/BudgetCmpt.vue","webpack:///./src/services/BudgetDataService.ts","webpack:///./src/services/AllocationService.ts","webpack:///./src/model/model.ts","webpack:///./src/components/MasterCategoryCmpt.vue","webpack:///./src/utils/Utils.ts","webpack:///./src/components/forms/CategoryForm.vue","webpack:///./src/components/forms/CategoryForm.vue?a490","webpack:///./src/components/forms/CategoryForm.vue?2b8b","webpack:///./src/components/forms/MasterCategoryForm.vue","webpack:///./src/components/forms/MasterCategoryForm.vue?80fb","webpack:///./src/components/forms/MasterCategoryForm.vue?046f","webpack:///./src/components/MasterCategoryCmpt.vue?853a","webpack:///./src/components/MasterCategoryCmpt.vue?bb05","webpack:///./src/components/BudgetCmpt.vue?8292","webpack:///./src/components/BudgetCmpt.vue?8789","webpack:///./src/components/AccountsWidget.vue","webpack:///./src/components/forms/AccountCreationForm.vue","webpack:///./src/components/forms/AccountCreationForm.vue?3ce3","webpack:///./src/components/forms/AccountCreationForm.vue?1ffd","webpack:///./src/components/AccountsWidget.vue?5c29","webpack:///./src/components/AccountsWidget.vue?5889","webpack:///./src/services/PersonService.ts","webpack:///./src/components/utils/Loader.vue","webpack:///./src/components/utils/Loader.vue?8001","webpack:///./src/components/utils/Loader.vue?f372","webpack:///./src/views/Home.vue?d5e7","webpack:///./src/views/Home.vue?ab8c","webpack:///./src/views/Login.vue","webpack:///./src/views/Login.vue?e144","webpack:///./src/views/Login.vue?e63b","webpack:///./src/views/AccountPage.vue","webpack:///./src/services/OperationService.ts","webpack:///./src/components/forms/OperationForm.vue","webpack:///./src/components/forms/OperationForm.vue?1c2a","webpack:///./src/components/forms/OperationForm.vue?6ade","webpack:///./src/views/AccountPage.vue?81f0","webpack:///./src/views/AccountPage.vue?f8d0","webpack:///./src/router/index.ts","webpack:///./src/main.ts","webpack:///./src/assets/logo.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","jsonpScriptSrc","p","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","class","render","ready","log","registered","cached","updatefound","updated","offline","style","id","$store","state","css","storeLoaded","month","currentMonth","title","$t","logout","Properties","makeSuper","superTokenAxios","init","refreshTokenUrl","refreshUrl","server","replace","configuration","basePath","axios","this","field","msg","DUMMY_BASE_URL","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","set","toString","toPathString","pathname","hash","axiosArgs","globalAxios","BASE_PATH","axiosRequestArgs","options","withCredentials","addAccount","budgetId","amount","day","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","deleteAccount","accountId","findAccountsByBudget","updateAccount","newName","localVarAxiosParamCreator","localVarAxiosArgs","then","addAllocation","categoryId","addBudget","deleteBudget","findBudgetsByUser","updateBudget","findBudgetData","startMonth","endMonth","findTotalBudgetAmount","addCategory","masterCategoryId","getCategoriesByBudget","updateCategory","newMasterCategoryId","newArchived","newDeleted","addMasterCategory","getMasterCategoriesByBudget","updateMasterCategory","addOperation","memo","deleteOperation","operationId","findOperationsByAccount","findOperationsByBudget","updateOperation","newAccountId","newDay","newCategoryId","newAmount","newMemo","createPerson","password","email","createSession","deleteSession","personApi","budgetApi","budgetDataApi","accountApi","operationApi","allocationApi","categoryApi","masterCategoryApi","logged","doesSessionExist","budget","accounts","categories","masterCategories","mutations","updateLogged","initStore","resetStore","updateOnBudgetChange","updateAccounts","updateCategories","sort","a","b","toLowerCase","updateMasterCategories","updateStoreLoaded","actions","context","commit","dateTime","Date","year","getFullYear","getMonth","monthAsInt","getDayFromDate","getCurrentDate","formatDate","date","setMonth","setFullYear","getDate","dateString","dayAsInt","getMonthAsDate","setDate","getDateFromDay","currentYear","toISOString","split","response","redirectToLoginPageIfUnauthorizedError","getCurrentDay","masterCategory","store","initBudget","dispatch","getAccounts","getCategories","getMasterCategories","getDefaultBudget","category","archived","goToLastMonth","toBeBudgetedClass","$d","budgetMonth","isThisYear","toBeBudgeted","getEurosAmount","goToNextMonth","createMasterCategory","totalBudgetData","allocated","spent","available","updateAllocation","categoryDataList","archiveVisible","focusOn","loosesFocus","createCategory","putFocusOn","masterCategoryData","updateAllocationOnChange","$event","centsAmount","eurosAmount","Math","round","unarchiveCategory","$emit","archiveCategory","props","required","emits","methods","unarchiveMasterCategory","archiveMasterCategory","renameMasterCategory","components","CategoryForm","MasterCategoryForm","Boolean","default","computed","getCategoriesByMasterCategory","getCentsAmount","MasterCategoryCmpt","Number","created","getBudgetData","watch","account","formerAllocations","$props","amountInBudget","monthIsThisYear","getBudgetDataForMonth","initFormerAllocation","getBudgetAmount","newAllocation","getNextMonth","getLastMonth","totalOnAccounts","goToAccountPage","accountCreationFormIsDisplayed","changeAccountCreationFormDisplay","for","placeholder","createAccount","AccountCreationForm","total","path","RouterPages","$data","home","isAxiosError","JSON","parse","redirectToLoginPageIfNotLogged","beforeCreate","BudgetCmpt","AccountsWidget","Loader","getCurrentMonth","alt","login","errorMsg","responseData","unlockingDate","minutes","lockingDuration","getTime","__scopeId","getAccountOperation","operations","operation","editing","getDayAsDate","getCategoryById","setAsEditing","disabled","data-on","data-off","incomeCategoryId","transfertCategoryId","label","getArchivedCategories","incoming","getDateStringFromDay","getCurrentDateString","abs","String","signedCentsAmount","getDayFromDateString","getCategoriesByArchivedStatus","OperationForm","getOperations","operationToEditableOperation","editableOperations","forEach","routes","component","Home","Login","AccountPage","route","about","router","history","status","messages","fr","en","i18n","locale","fallbackLocale","datetimeFormats","commitHash","App","use","mount"],"mappings":"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","file":"js/app.d16edfd6.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({\"about\":\"about\"}[chunkId]||chunkId) + \".\" + {\"about\":\"b6ed1c4d\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Login.vue?vue&type=style&index=0&id=23c404fd&scoped=true&lang=less\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=207f7db8&lang=less\"","module.exports = __webpack_public_path__ + \"img/logo_round.87e0efea.png\";","<template>\n<div class=\"main container-fluid\">\n  <div class=\"main-row row\">\n  <router-view/>\n  </div>\n</div>\n</template>\n<style lang=\"less\">\n.main {\n  height: 100vh;\n};\n.main-row {\n  height: 100%;\n};\n@import \"~bootstrap/dist/css/bootstrap.min.css\";\n@import \"style/all.less\";\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=207f7db8\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=207f7db8&lang=less\"\nscript.render = render\n\nexport default script","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","<template >\n  <div :class=\"this.$store.state.css\">\n    <div class=\"home row\" style=\"margin-top: 20px\">\n      <div v-if=\"this.$store.state.storeLoaded\" class=\"row\">\n        <div class=\"col-md-5 offset-md-2\">\n          <BudgetCmpt :month=\"this.currentMonth\" />\n        </div>\n        <div class=\"col-md-2 offset-md-1\">\n          <AccountsWidget/>\n          <ul id=\"actionsList\" class=\"list-group list-group-horizontal d-flex justify-content-center\">\n          <li><button class=\"btn fas fa-chart-line disabled\" :title=\"$t('GRAPH_AND_REPORT')\"/></li>\n          <li><button class=\"btn fas fa-cog disabled\" :title=\"$t('PREFERENCES')\"/></li>\n          <li><button v-on:click=\"logout\" class=\"btn fas fa-sign-out-alt\" :title=\"$t('LOGOUT')\"/></li>\n        </ul>\n        </div>\n      </div>\n    <div v-else>\n        <Loader class=\"loader\"/>\n    </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport BudgetCmpt from '@/components/BudgetCmpt.vue' // @ is an alias to /src\nimport AccountsWidget from '@/components/AccountsWidget.vue'\nimport PersonService from '@/services/PersonService'\nimport Time from '@/utils/Time'\nimport Loader from '@/components/utils/Loader.vue'\n\nexport default defineComponent({\n  name: 'Home',\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n  },\n  components: {\n    BudgetCmpt,\n    AccountsWidget,\n    Loader\n  },\n  data () {\n    return {\n      currentMonth: Time.getCurrentMonth()\n    }\n  },\n  methods: {\n    logout () {\n      PersonService.deleteSession(this.$store)\n    }\n  }\n})\n</script>\n","enum Properties {\n    server = 'https://api.agatha-budget.fr/',\n    refreshUrl = 'https://api.agatha-budget.fr/session/refresh',\n    commitHash = 'e557b6d344e020264d10477310d6f0f3c6416d3e',\n}\n\nexport default Properties\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\nimport SuperTokensRequest from 'supertokens-website/axios';\nimport Properties from '@/../properties';\n\n\nSuperTokensRequest.makeSuper(globalAxios);\nexport const superTokenAxios = globalAxios;\n\nSuperTokensRequest.init({\n    refreshTokenUrl: Properties.refreshUrl\n});\n\nexport const BASE_PATH = Properties.server.replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = superTokenAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            searchParams.set(key, object[key]);\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url, withCredentials: true};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, superTokenAxios as globalAxios} from './base';\n\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface Allocation\n */\nexport interface Allocation {\n    /**\n     * \n     * @type {number}\n     * @memberof Allocation\n     */\n    month: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Allocation\n     */\n    categoryId: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Allocation\n     */\n    amount: number;\n}\n/**\n * \n * @export\n * @interface Budget\n */\nexport interface Budget {\n    /**\n     * \n     * @type {string}\n     * @memberof Budget\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Budget\n     */\n    name: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Budget\n     */\n    isDefault?: boolean;\n}\n/**\n * \n * @export\n * @interface Category\n */\nexport interface Category {\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    masterCategoryId: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Category\n     */\n    archived: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Category\n     */\n    deleted: boolean;\n}\n/**\n * \n * @export\n * @interface CategoryData\n */\nexport interface CategoryData {\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    allocated: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    spent: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    available: number;\n}\n/**\n * \n * @export\n * @interface MasterCategory\n */\nexport interface MasterCategory {\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    budgetId: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof MasterCategory\n     */\n    deleted: boolean;\n}\n/**\n * \n * @export\n * @interface Operation\n */\nexport interface Operation {\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Operation\n     */\n    day: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    accountId: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    categoryId: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Operation\n     */\n    amount: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    memo: string;\n}\n\n/**\n * AccountApi - axios parameter creator\n * @export\n */\nexport const AccountApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAccount: async (budgetId: string, name: string, amount: number, day: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('addAccount', 'budgetId', budgetId)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addAccount', 'name', name)\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('addAccount', 'amount', amount)\n            // verify required parameter 'day' is not null or undefined\n            assertParamExists('addAccount', 'day', day)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n            if (day !== undefined) {\n                localVarQueryParameter['day'] = day;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAccount: async (accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAccount', 'accountId', accountId)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAccountsByBudget: async (budgetId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findAccountsByBudget', 'budgetId', budgetId)\n            const localVarPath = `/account/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} id \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount: async (id: string, newName: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateAccount', 'id', id)\n            // verify required parameter 'newName' is not null or undefined\n            assertParamExists('updateAccount', 'newName', newName)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AccountApi - functional programming interface\n * @export\n */\nexport const AccountApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addAccount(budgetId: string, name: string, amount: number, day: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount(budgetId, name, amount, day, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAccount(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findAccountsByBudget(budgetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findAccountsByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} id \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAccount(id: string, newName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(id, newName, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AccountApi - factory interface\n * @export\n */\nexport const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AccountApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAccount(budgetId: string, name: string, amount: number, day: number, options?: any): AxiosPromise<string> {\n            return localVarFp.addAccount(budgetId, name, amount, day, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAccount(accountId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteAccount(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAccountsByBudget(budgetId: string, options?: any): AxiosPromise<Array<Account>> {\n            return localVarFp.findAccountsByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} id \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount(id: string, newName: string, options?: any): AxiosPromise<string> {\n            return localVarFp.updateAccount(id, newName, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AccountApi - object-oriented interface\n * @export\n * @class AccountApi\n * @extends {BaseAPI}\n */\nexport class AccountApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new account\n     * @param {string} budgetId \n     * @param {string} name \n     * @param {number} amount \n     * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public addAccount(budgetId: string, name: string, amount: number, day: number, options?: any) {\n        return AccountApiFp(this.configuration).addAccount(budgetId, name, amount, day, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete account\n     * @param {string} accountId id of the account you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public deleteAccount(accountId: string, options?: any) {\n        return AccountApiFp(this.configuration).deleteAccount(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds accounts by budget\n     * @param {string} budgetId id of the budget whose accounts you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public findAccountsByBudget(budgetId: string, options?: any) {\n        return AccountApiFp(this.configuration).findAccountsByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Rename an account\n     * @param {string} id \n     * @param {string} newName \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public updateAccount(id: string, newName: string, options?: any) {\n        return AccountApiFp(this.configuration).updateAccount(id, newName, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AllocationApi - axios parameter creator\n * @export\n */\nexport const AllocationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAllocation: async (month: number, categoryId: string, amount: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'month' is not null or undefined\n            assertParamExists('addAllocation', 'month', month)\n            // verify required parameter 'categoryId' is not null or undefined\n            assertParamExists('addAllocation', 'categoryId', categoryId)\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('addAllocation', 'amount', amount)\n            const localVarPath = `/allocation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (month !== undefined) {\n                localVarQueryParameter['month'] = month;\n            }\n\n            if (categoryId !== undefined) {\n                localVarQueryParameter['category_id'] = categoryId;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AllocationApi - functional programming interface\n * @export\n */\nexport const AllocationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AllocationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addAllocation(month: number, categoryId: string, amount: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Allocation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addAllocation(month, categoryId, amount, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AllocationApi - factory interface\n * @export\n */\nexport const AllocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AllocationApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAllocation(month: number, categoryId: string, amount: number, options?: any): AxiosPromise<Allocation> {\n            return localVarFp.addAllocation(month, categoryId, amount, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AllocationApi - object-oriented interface\n * @export\n * @class AllocationApi\n * @extends {BaseAPI}\n */\nexport class AllocationApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new allocation or update an existing one\n     * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n     * @param {string} categoryId \n     * @param {number} amount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AllocationApi\n     */\n    public addAllocation(month: number, categoryId: string, amount: number, options?: any) {\n        return AllocationApiFp(this.configuration).addAllocation(month, categoryId, amount, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * BudgetApi - axios parameter creator\n * @export\n */\nexport const BudgetApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addBudget: async (name: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addBudget', 'name', name)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication accessToken required\n\n            // authentication refreshTokenId required\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBudget: async (budgetId: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('deleteBudget', 'budgetId', budgetId)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetsByUser: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/budget/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBudget: async (budgetId: string, newName: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('updateBudget', 'budgetId', budgetId)\n            // verify required parameter 'newName' is not null or undefined\n            assertParamExists('updateBudget', 'newName', newName)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BudgetApi - functional programming interface\n * @export\n */\nexport const BudgetApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BudgetApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addBudget(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addBudget(name, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBudget(budgetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findBudgetsByUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Budget>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findBudgetsByUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBudget(budgetId: string, newName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBudget(budgetId, newName, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * BudgetApi - factory interface\n * @export\n */\nexport const BudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BudgetApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addBudget(name: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addBudget(name, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBudget(budgetId: number, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetsByUser(options?: any): AxiosPromise<Array<Budget>> {\n            return localVarFp.findBudgetsByUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBudget(budgetId: string, newName: string, options?: any): AxiosPromise<string> {\n            return localVarFp.updateBudget(budgetId, newName, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BudgetApi - object-oriented interface\n * @export\n * @class BudgetApi\n * @extends {BaseAPI}\n */\nexport class BudgetApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new budget\n     * @param {string} name name of the new budget\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public addBudget(name: string, options?: any) {\n        return BudgetApiFp(this.configuration).addBudget(name, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete budget\n     * @param {number} budgetId id of the budget you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public deleteBudget(budgetId: number, options?: any) {\n        return BudgetApiFp(this.configuration).deleteBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds budgets by user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public findBudgetsByUser(options?: any) {\n        return BudgetApiFp(this.configuration).findBudgetsByUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a budget\n     * @param {string} budgetId id of the updated budget\n     * @param {string} newName new name of the new budget\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public updateBudget(budgetId: string, newName: string, options?: any) {\n        return BudgetApiFp(this.configuration).updateBudget(budgetId, newName, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * BudgetDataApi - axios parameter creator\n * @export\n */\nexport const BudgetDataApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetData: async (budgetId: string, startMonth?: number, endMonth?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findBudgetData', 'budgetId', budgetId)\n            const localVarPath = `/budget/data`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (startMonth !== undefined) {\n                localVarQueryParameter['start_month'] = startMonth;\n            }\n\n            if (endMonth !== undefined) {\n                localVarQueryParameter['end_month'] = endMonth;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTotalBudgetAmount: async (budgetId: string, month?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findTotalBudgetAmount', 'budgetId', budgetId)\n            const localVarPath = `/budget/amount`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (month !== undefined) {\n                localVarQueryParameter['month'] = month;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BudgetDataApi - functional programming interface\n * @export\n */\nexport const BudgetDataApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BudgetDataApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: { [key: string]: CategoryData; }; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findBudgetData(budgetId, startMonth, endMonth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findTotalBudgetAmount(budgetId: string, month?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findTotalBudgetAmount(budgetId, month, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * BudgetDataApi - factory interface\n * @export\n */\nexport const BudgetDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BudgetDataApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: any): AxiosPromise<{ [key: string]: { [key: string]: CategoryData; }; }> {\n            return localVarFp.findBudgetData(budgetId, startMonth, endMonth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTotalBudgetAmount(budgetId: string, month?: number, options?: any): AxiosPromise<number> {\n            return localVarFp.findTotalBudgetAmount(budgetId, month, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BudgetDataApi - object-oriented interface\n * @export\n * @class BudgetDataApi\n * @extends {BaseAPI}\n */\nexport class BudgetDataApi extends BaseAPI {\n    /**\n     * \n     * @summary Find data by budget\n     * @param {string} budgetId \n     * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n     * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetDataApi\n     */\n    public findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: any) {\n        return BudgetDataApiFp(this.configuration).findBudgetData(budgetId, startMonth, endMonth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find amount on accounts by budget\n     * @param {string} budgetId \n     * @param {number} [month] example : mars 2020 &#x3D; 202003\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetDataApi\n     */\n    public findTotalBudgetAmount(budgetId: string, month?: number, options?: any) {\n        return BudgetDataApiFp(this.configuration).findTotalBudgetAmount(budgetId, month, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * CategoryApi - axios parameter creator\n * @export\n */\nexport const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCategory: async (name: string, masterCategoryId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addCategory', 'name', name)\n            // verify required parameter 'masterCategoryId' is not null or undefined\n            assertParamExists('addCategory', 'masterCategoryId', masterCategoryId)\n            const localVarPath = `/category`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (masterCategoryId !== undefined) {\n                localVarQueryParameter['master_category_id'] = masterCategoryId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCategoriesByBudget: async (budgetId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('getCategoriesByBudget', 'budgetId', budgetId)\n            const localVarPath = `/category/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCategory: async (id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateCategory', 'id', id)\n            const localVarPath = `/category`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n            if (newMasterCategoryId !== undefined) {\n                localVarQueryParameter['new_master_category_id'] = newMasterCategoryId;\n            }\n\n            if (newArchived !== undefined) {\n                localVarQueryParameter['new_archived'] = newArchived;\n            }\n\n            if (newDeleted !== undefined) {\n                localVarQueryParameter['new_deleted'] = newDeleted;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * CategoryApi - functional programming interface\n * @export\n */\nexport const CategoryApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addCategory(name: string, masterCategoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(name, masterCategoryId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCategoriesByBudget(budgetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * CategoryApi - factory interface\n * @export\n */\nexport const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = CategoryApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCategory(name: string, masterCategoryId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addCategory(name, masterCategoryId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCategoriesByBudget(budgetId: string, options?: any): AxiosPromise<Array<Category>> {\n            return localVarFp.getCategoriesByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: any): AxiosPromise<string> {\n            return localVarFp.updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * CategoryApi - object-oriented interface\n * @export\n * @class CategoryApi\n * @extends {BaseAPI}\n */\nexport class CategoryApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new category\n     * @param {string} name \n     * @param {string} masterCategoryId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public addCategory(name: string, masterCategoryId: string, options?: any) {\n        return CategoryApiFp(this.configuration).addCategory(name, masterCategoryId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get categories by budget\n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public getCategoriesByBudget(budgetId: string, options?: any) {\n        return CategoryApiFp(this.configuration).getCategoriesByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a category\n     * @param {string} id \n     * @param {string} [newName] \n     * @param {number} [newMasterCategoryId] \n     * @param {boolean} [newArchived] \n     * @param {boolean} [newDeleted] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: any) {\n        return CategoryApiFp(this.configuration).updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * MasterCategoryApi - axios parameter creator\n * @export\n */\nexport const MasterCategoryApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMasterCategory: async (name: string, budgetId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addMasterCategory', 'name', name)\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('addMasterCategory', 'budgetId', budgetId)\n            const localVarPath = `/mcategory`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMasterCategoriesByBudget: async (budgetId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('getMasterCategoriesByBudget', 'budgetId', budgetId)\n            const localVarPath = `/mcategory/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMasterCategory: async (id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMasterCategory', 'id', id)\n            const localVarPath = `/mcategory`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n            if (newArchived !== undefined) {\n                localVarQueryParameter['new_archived'] = newArchived;\n            }\n\n            if (newDeleted !== undefined) {\n                localVarQueryParameter['new_deleted'] = newDeleted;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MasterCategoryApi - functional programming interface\n * @export\n */\nexport const MasterCategoryApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = MasterCategoryApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMasterCategory(name: string, budgetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMasterCategory(name, budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMasterCategoriesByBudget(budgetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MasterCategory>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMasterCategoriesByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMasterCategory(id, newName, newArchived, newDeleted, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * MasterCategoryApi - factory interface\n * @export\n */\nexport const MasterCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = MasterCategoryApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMasterCategory(name: string, budgetId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addMasterCategory(name, budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMasterCategoriesByBudget(budgetId: string, options?: any): AxiosPromise<Array<MasterCategory>> {\n            return localVarFp.getMasterCategoriesByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: any): AxiosPromise<string> {\n            return localVarFp.updateMasterCategory(id, newName, newArchived, newDeleted, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * MasterCategoryApi - object-oriented interface\n * @export\n * @class MasterCategoryApi\n * @extends {BaseAPI}\n */\nexport class MasterCategoryApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new master category\n     * @param {string} name \n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public addMasterCategory(name: string, budgetId: string, options?: any) {\n        return MasterCategoryApiFp(this.configuration).addMasterCategory(name, budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get master categories by budget\n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public getMasterCategoriesByBudget(budgetId: string, options?: any) {\n        return MasterCategoryApiFp(this.configuration).getMasterCategoriesByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update master category\n     * @param {string} id \n     * @param {string} [newName] \n     * @param {boolean} [newArchived] \n     * @param {boolean} [newDeleted] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: any) {\n        return MasterCategoryApiFp(this.configuration).updateMasterCategory(id, newName, newArchived, newDeleted, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * OperationApi - axios parameter creator\n * @export\n */\nexport const OperationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOperation: async (accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('addOperation', 'accountId', accountId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n            if (day !== undefined) {\n                localVarQueryParameter['day'] = day;\n            }\n\n            if (categoryId !== undefined) {\n                localVarQueryParameter['category_id'] = categoryId;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n            if (memo !== undefined) {\n                localVarQueryParameter['memo'] = memo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation: async (operationId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'operationId' is not null or undefined\n            assertParamExists('deleteOperation', 'operationId', operationId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (operationId !== undefined) {\n                localVarQueryParameter['operation_id'] = operationId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByAccount: async (accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('findOperationsByAccount', 'accountId', accountId)\n            const localVarPath = `/operation/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByBudget: async (accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('findOperationsByBudget', 'accountId', accountId)\n            const localVarPath = `/operation/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOperation: async (operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'operationId' is not null or undefined\n            assertParamExists('updateOperation', 'operationId', operationId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (operationId !== undefined) {\n                localVarQueryParameter['operation_id'] = operationId;\n            }\n\n            if (newAccountId !== undefined) {\n                localVarQueryParameter['new_account_id'] = newAccountId;\n            }\n\n            if (newDay !== undefined) {\n                localVarQueryParameter['new_day'] = newDay;\n            }\n\n            if (newCategoryId !== undefined) {\n                localVarQueryParameter['new_category_id'] = newCategoryId;\n            }\n\n            if (newAmount !== undefined) {\n                localVarQueryParameter['new_amount'] = newAmount;\n            }\n\n            if (newMemo !== undefined) {\n                localVarQueryParameter['new_memo'] = newMemo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OperationApi - functional programming interface\n * @export\n */\nexport const OperationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = OperationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addOperation(accountId, day, categoryId, amount, memo, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteOperation(operationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOperation(operationId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findOperationsByAccount(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Operation>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findOperationsByAccount(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findOperationsByBudget(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Operation>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findOperationsByBudget(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * OperationApi - factory interface\n * @export\n */\nexport const OperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = OperationApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: any): AxiosPromise<Operation> {\n            return localVarFp.addOperation(accountId, day, categoryId, amount, memo, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation(operationId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteOperation(operationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByAccount(accountId: string, options?: any): AxiosPromise<Array<Operation>> {\n            return localVarFp.findOperationsByAccount(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByBudget(accountId: string, options?: any): AxiosPromise<Array<Operation>> {\n            return localVarFp.findOperationsByBudget(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: any): AxiosPromise<Operation> {\n            return localVarFp.updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * OperationApi - object-oriented interface\n * @export\n * @class OperationApi\n * @extends {BaseAPI}\n */\nexport class OperationApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new operation\n     * @param {string} accountId \n     * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n     * @param {string} [categoryId] \n     * @param {number} [amount] \n     * @param {string} [memo] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: any) {\n        return OperationApiFp(this.configuration).addOperation(accountId, day, categoryId, amount, memo, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete operation\n     * @param {string} operationId id of the operation you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public deleteOperation(operationId: string, options?: any) {\n        return OperationApiFp(this.configuration).deleteOperation(operationId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find operation by account\n     * @param {string} accountId id of the account whose operations you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public findOperationsByAccount(accountId: string, options?: any) {\n        return OperationApiFp(this.configuration).findOperationsByAccount(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find operation by budget\n     * @param {string} accountId id of the budget whose operations you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public findOperationsByBudget(accountId: string, options?: any) {\n        return OperationApiFp(this.configuration).findOperationsByBudget(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an operation\n     * @param {string} operationId \n     * @param {string} [newAccountId] \n     * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n     * @param {string} [newCategoryId] \n     * @param {number} [newAmount] \n     * @param {string} [newMemo] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: any) {\n        return OperationApiFp(this.configuration).updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPerson: async (name: string, password: string, email: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('createPerson', 'name', name)\n            // verify required parameter 'password' is not null or undefined\n            assertParamExists('createPerson', 'password', password)\n            // verify required parameter 'email' is not null or undefined\n            assertParamExists('createPerson', 'email', email)\n            const localVarPath = `/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSession: async (email: string, password: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'email' is not null or undefined\n            assertParamExists('createSession', 'email', email)\n            // verify required parameter 'password' is not null or undefined\n            assertParamExists('createSession', 'password', password)\n            const localVarPath = `/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSession: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication accessToken required\n\n            // authentication refreshTokenId required\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPerson(name: string, password: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(name, password, email, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSession(email: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(email, password, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPerson(name: string, password: string, email: string, options?: any): AxiosPromise<string> {\n            return localVarFp.createPerson(name, password, email, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSession(email: string, password: string, options?: any): AxiosPromise<string> {\n            return localVarFp.createSession(email, password, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSession(options?: any): AxiosPromise<string> {\n            return localVarFp.deleteSession(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Create a person\n     * @param {string} name \n     * @param {string} password \n     * @param {string} email \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public createPerson(name: string, password: string, email: string, options?: any) {\n        return PersonApiFp(this.configuration).createPerson(name, password, email, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Login\n     * @param {string} email \n     * @param {string} password \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public createSession(email: string, password: string, options?: any) {\n        return PersonApiFp(this.configuration).createSession(email, password, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public deleteSession(options?: any) {\n        return PersonApiFp(this.configuration).deleteSession(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","import { PersonApi, AccountApi, BudgetApi, AllocationApi, BudgetDataApi, OperationApi, CategoryApi, MasterCategoryApi } from './openApi/api'\n\nexport const personApi = new PersonApi()\nexport const budgetApi = new BudgetApi()\nexport const budgetDataApi = new BudgetDataApi()\nexport const accountApi = new AccountApi()\nexport const operationApi = new OperationApi()\nexport const allocationApi = new AllocationApi()\nexport const categoryApi = new CategoryApi()\nexport const masterCategoryApi = new MasterCategoryApi()\n","import { InjectionKey } from 'vue'\nimport { createStore, Store, useStore as baseUseStore } from 'vuex'\nimport SuperTokensRequest from 'supertokens-website/axios'\nimport { Budget, Account, Category, MasterCategory } from '@/model/model'\nimport StoreHandler from './StoreHandler'\n\nexport interface StoreState {\n  logged: boolean;\n  budget: Budget | null;\n  accounts: Account[];\n  categories: Category[];\n  masterCategories: MasterCategory[];\n  css: string;\n  storeLoaded: boolean;\n}\n\nexport const key: InjectionKey<Store<StoreState>> = Symbol('injectionKey')\n\nexport const store = createStore<StoreState>({\n  state: {\n    logged: SuperTokensRequest.doesSessionExist(),\n    budget: null,\n    accounts: [],\n    categories: [],\n    masterCategories: [],\n    css: 'default',\n    storeLoaded: false\n  },\n  mutations: {\n    updateLogged (state) {\n      state.logged = SuperTokensRequest.doesSessionExist()\n      if (state.logged) {\n        StoreHandler.initStore(store)\n      } else {\n        StoreHandler.resetStore(store)\n      }\n    },\n    updateBudget (state, budget: Budget) {\n      if (budget !== state.budget) {\n        state.budget = budget\n        StoreHandler.updateOnBudgetChange(store)\n      }\n    },\n    updateAccounts (state, accounts: Account[]) {\n      state.accounts = accounts\n    },\n    updateCategories (state, categories: Category[]) {\n      state.categories = categories.sort((a, b) => (a.name.toLowerCase() <= b.name.toLowerCase() ? -1 : 1))\n    },\n    updateMasterCategories (state, masterCategories: MasterCategory[]) {\n      state.masterCategories = masterCategories.sort((a, b) => (a.name.toLowerCase() <= b.name.toLowerCase() ? -1 : 1))\n    },\n    updateStoreLoaded (state, storeLoaded: boolean) {\n      state.storeLoaded = storeLoaded\n    }\n  },\n  actions: {\n    updateLogged (context) {\n      context.commit('updateLogged')\n    },\n    updateBudget (context, budget: Budget) {\n      context.commit('updateBudget', budget)\n    },\n    updateAccounts (context, accounts: Account[]) {\n      context.commit('updateAccounts', accounts)\n    },\n    updateCategories (context, categories: Category[]) {\n      context.commit('updateCategories', categories)\n    },\n    updateMasterCategories (context, masterCategories: MasterCategory[]) {\n      context.commit('updateMasterCategories', masterCategories)\n    },\n    updateStoreLoaded (context, storeLoaded: boolean) {\n      context.commit('updateStoreLoaded', storeLoaded)\n    }\n  },\n  modules: {\n  }\n})\n\nexport function useStore (): Store<StoreState> {\n  return baseUseStore(key)\n}\n","export default class Time {\n  public static getCurrentMonth (): number {\n    const dateTime = new Date()\n    const year = dateTime.getFullYear()\n    const month = dateTime.getMonth() + 1 // by default from 0 to 11\n    return year * 100 + month\n  }\n\n  public static getNextMonth (monthAsInt: number): number {\n    let month = monthAsInt % 100\n    let year = (monthAsInt - month) / 100\n    if (month < 12) {\n      month += 1\n    } else {\n      year += 1\n      month = 1\n    }\n    return year * 100 + month\n  }\n\n  public static getLastMonth (monthAsInt: number): number {\n    let month = monthAsInt % 100\n    let year = (monthAsInt - month) / 100\n    if (month > 1) {\n      month -= 1\n    } else {\n      year -= 1\n      month = 12\n    }\n    return year * 100 + month\n  }\n\n  public static getCurrentDay (): number {\n    return this.getDayFromDate(this.getCurrentDate())\n  }\n\n  public static getCurrentDate (): Date {\n    return new Date()\n  }\n\n  public static getCurrentDateString (): string {\n    return this.formatDate(this.getCurrentDate())\n  }\n\n  public static getMonthAsDate (monthAsInt: number): Date {\n    const date = new Date()\n    const month = monthAsInt % 100\n    const year = (monthAsInt - month) / 100\n    date.setMonth(month - 1)\n    date.setFullYear(year)\n    return date\n  }\n\n  public static getDayFromDate (dateTime: Date): number {\n    const year = dateTime.getFullYear()\n    const month = dateTime.getMonth() + 1 // because the form count month from 0 - 11\n    const day = dateTime.getDate()\n    return year * 10000 + month * 100 + day\n  }\n\n  public static getDayFromDateString (dateString: string): number {\n    const date = new Date(dateString)\n    return this.getDayFromDate(date)\n  }\n\n  public static getDateFromDay (dayAsInt: number): Date {\n    const day = dayAsInt % 100\n    const monthAsInt = ((dayAsInt - day) / 100)\n    const date = this.getMonthAsDate(monthAsInt)\n    date.setDate(day)\n    return date\n  }\n\n  public static getDateStringFromDay (dayAsInt: number): string {\n    const date = this.getDateFromDay(dayAsInt)\n    return this.formatDate(date)\n  }\n\n  public static monthIsThisYear (monthAsInt: number): boolean {\n    const year = this.getMonthAsDate(monthAsInt).getFullYear()\n    const currentYear = new Date().getFullYear()\n    return year === currentYear\n  }\n\n  private static formatDate (date: Date): string {\n    return date.toISOString().split('T')[0]\n  }\n}\n","import { Budget, Account } from '@/model/model'\nimport { accountApi } from '@/services/api/apis'\nimport { store } from '@/store'\nimport StoreHandler from '@/store/StoreHandler'\nimport Time from '@/utils/Time'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class AccountService {\n  public static async getAccounts (budget: Budget): Promise<Account[]> {\n    const data: Account[] = []\n    if (budget.id) {\n      const response = await accountApi.findAccountsByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n\n  public static async createAccount (budget: Budget, name: string, amount: number) {\n    await accountApi.addAccount(budget.id, name, amount, Time.getCurrentDay()).then(\n      (response) => {\n        redirectToLoginPageIfUnauthorizedError(response)\n        StoreHandler.updateAccounts(store)\n      }\n    )\n  }\n}\n","import { Budget } from '@/model/model'\nimport { budgetApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class BudgetService {\n  public static async getDefaultBudget (): Promise<Budget> {\n    try {\n      const response = await budgetApi.findBudgetsByUser()\n      return response.data[0]\n    } catch (exception) {\n      redirectToLoginPageIfUnauthorizedError(exception.response)\n      return exception.response\n    }\n  }\n}\n","import { Budget, Category, MasterCategory } from '@/model/model'\nimport { categoryApi } from '@/services/api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class CategoryService {\n  public static async createCategory (name: string, masterCategory: MasterCategory) {\n    const response = await categoryApi.addCategory(name, masterCategory.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async updateCategory (categoryId: string, newName: string) {\n    const response = await categoryApi.updateCategory(categoryId, newName)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async archiveCategory (categoryId: string) {\n    const response = await categoryApi.updateCategory(categoryId, undefined, undefined, true)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async unarchiveCategory (categoryId: string) {\n    const response = await categoryApi.updateCategory(categoryId, undefined, undefined, false)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async getCategories (budget: Budget): Promise<Category[]> {\n    const data: Category[] = []\n    if (budget.id) {\n      const response = await categoryApi.getCategoriesByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n}\n","import { Budget, MasterCategory } from '@/model/model'\nimport { masterCategoryApi } from '@/services/api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class MasterCategoryService {\n  public static async createMasterCategory (name: string, budget: Budget) {\n    await masterCategoryApi.addMasterCategory(name, budget.id)\n  }\n\n  public static async renameMasterCategory (masterCategoryId: string, newName: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, newName)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async archiveMasterCategory (masterCategoryId: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, undefined, true)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async unarchiveMasterCategory (masterCategoryId: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, undefined, false)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async getMasterCategories (budget: Budget): Promise<MasterCategory[]> {\n    const data: MasterCategory[] = []\n    if (budget.id) {\n      const response = await masterCategoryApi.getMasterCategoriesByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n}\n","import { Budget, Account, Category, MasterCategory } from '@/model/model'\nimport AccountService from '@/services/AccountService'\nimport BudgetService from '@/services/BudgetService'\nimport CategoryService from '@/services/CategoryService'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\n\nexport default class StoreHandler {\n  public static async initStore (store: Store<StoreState>) {\n    await this.initBudget(store)\n  }\n\n  public static resetStore (store: Store<StoreState>) {\n    store.dispatch('updateBudget', null)\n    store.dispatch('updateAccounts', [])\n    store.dispatch('updateCategories', [])\n    store.dispatch('updateMasterCategories', [])\n    store.dispatch('updateStoreLoaded', false)\n  }\n\n  public static async updateOnBudgetChange (store: Store<StoreState>) {\n    this.updateAccounts(store)\n    this.updateMasterCategories(store)\n    this.updateCategories(store)\n    store.dispatch('updateStoreLoaded', true)\n  }\n\n  public static async updateAccounts (store: Store<StoreState>) {\n    if (store.state.budget) {\n      AccountService.getAccounts(store.state.budget).then(\n        (accounts: Account[]) => {\n          store.dispatch('updateAccounts', accounts)\n        }\n      )\n    }\n  }\n\n  public static async updateCategories (store: Store<StoreState>) {\n    if (store.state.budget) {\n      CategoryService.getCategories(store.state.budget).then(\n        (categories: Category[]) => {\n          store.dispatch('updateCategories', categories)\n        }\n      )\n    }\n  }\n\n  public static async updateMasterCategories (store: Store<StoreState>) {\n    if (store.state.budget) {\n      MasterCategoryService.getMasterCategories(store.state.budget).then(\n        (masterCategories: MasterCategory[]) => {\n          store.dispatch('updateMasterCategories', masterCategories)\n        }\n      )\n    }\n  }\n\n  public static async initBudget (store: Store<StoreState>) {\n    BudgetService.getDefaultBudget().then(\n      (budget: Budget) => {\n        store.dispatch('updateBudget', budget)\n      }\n    )\n  }\n\n  public static getCategoryById (store: Store<StoreState>, categoryId: string): Category | null {\n    for (const category of store.state.categories) {\n      if (category.id === categoryId) {\n        return category\n      }\n    }\n    return null\n  }\n\n  public static getCategoriesByMasterCategory (store: Store<StoreState>, masterCategory: MasterCategory, archived: boolean): Category[] {\n    const categories: Category[] = []\n    for (const category of store.state.categories) {\n      if (category.masterCategoryId === masterCategory.id && category.archived === archived) {\n        categories.push(category)\n      }\n    }\n    return categories\n  }\n\n  public static getCategoriesByArchivedStatus (store: Store<StoreState>, archived: boolean): Category[] {\n    const categories: Category[] = []\n    for (const category of store.state.categories) {\n      if (category.archived === archived) {\n        categories.push(category)\n      }\n    }\n    return categories\n  }\n}\n","<template>\n  <div>\n    <div id=\"budgetTables\">\n      <div class=\"row date\">\n        <div class=\"col-2 d-flex justify-content-center\" ><button type=\"button\" class=\"btn fas fa-chevron-left\" v-on:click=\"this.goToLastMonth()\"/></div>\n        <div class=\"col-8 date-label\" :class=\"this.toBeBudgetedClass\">\n          <span class=\"month\">{{ $d(this.getMonthAsDate(budgetMonth), 'monthString') }} <span v-if=\"!this.isThisYear\"> {{ $d(this.getMonthAsDate(budgetMonth), 'year') }}</span></span>\n          <span class=\"toBeBudgeted\" v-if=\"this.toBeBudgeted > 0\"> : {{ getEurosAmount(this.toBeBudgeted) }} € {{$t('TO_BE_BUDGETED')}}</span>\n          <span class=\"toBePulledOut\" v-else-if=\"this.toBeBudgeted < 0\"> : {{ getEurosAmount(-1*this.toBeBudgeted) }} € {{$t('TO_BE_PULLED_OUT')}}</span>\n        </div>\n        <div class=\"col-2 d-flex justify-content-center\" ><button type=\"button\" class=\"btn fas fa-chevron-right\" v-on:click=\"this.goToNextMonth()\"/></div>\n      </div>\n      <table id=\"totalTable\" class=\"table\">\n          <tr>\n            <th class=\"col-6 name\"></th>\n            <th class=\"col-2 allocated\"><div>{{ $t(\"ALLOCATED\") }}</div></th>\n            <th class=\"col-2 spent\"><div>{{ $t(\"SPENT\") }}</div></th>\n            <th class=\"col-2 available\"><div>{{ $t(\"AVAILABLE\") }}</div></th>\n          </tr>\n          <tbody>\n          <tr>\n            <td class=\"name\"><div>{{ $t(\"TOTAL\") }} <button type=\"button\" class=\"btn fas fa-plus\" v-on:click=\"this.createMasterCategory()\"/></div></td>\n            <td class=\"allocated\">{{ getEurosAmount(this.totalBudgetData.allocated) }}</td>\n            <td class=\"spent\">{{ getEurosAmount(this.totalBudgetData.spent) }}</td>\n            <td class=\"available\">{{ getEurosAmount(this.totalBudgetData.available) }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"scrollable\">\n        <table class=\"budgetTable table\"\n        v-for=\"masterCategory of this.$store.state.masterCategories\"\n        :key=\"masterCategory\"\n        >\n            <master-category-cmpt\n              @update-allocation=\"updateAllocation\"\n              :masterCategory=\"masterCategory\"\n              :categoryDataList=\"this.categoryDataList\"\n            />\n        </table>\n        <div v-on:click=\"this.archiveVisible = !this.archiveVisible\">\n          <button v-if=\"this.archiveVisible\" class=\"btn fas fa-chevron-down\"/>\n          <button v-else class=\"btn fas fa-chevron-right\"/>\n          <a>{{$t('ARCHIVE')}}</a>\n        </div>\n        <div v-if=\"this.archiveVisible\" id=\"archive section\" >\n          <table class=\"budgetArchiveTable table\"\n          v-for=\"masterCategory in this.$store.state.masterCategories\"\n          :key=\"masterCategory\"\n          >\n              <master-category-cmpt\n                @update-allocation=\"updateAllocation\"\n                :masterCategory=\"masterCategory\"\n                :categoryDataList=\"this.categoryDataList\"\n                :archived=\"true\"\n              />\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport BudgetDataService from '@/services/BudgetDataService'\nimport AllocationService from '@/services/AllocationService'\nimport { Account, Budget, CategoryData, CategoryDataList } from '@/model/model'\nimport MasterCategoryCmpt from './MasterCategoryCmpt.vue'\nimport Time from '@/utils/Time'\nimport Utils from '@/utils/Utils'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport StoreHandler from '@/store/StoreHandler'\n\ninterface BudgetCmptData {\n    categoryDataList: CategoryDataList;\n    formerAllocations: {\n        [categoryId: string]: number;\n    };\n    budgetMonth: number;\n    amountInBudget: number;\n    archiveVisible: boolean;\n}\n\nexport default defineComponent({\n  name: 'BudgetCmpt',\n  components: {\n    MasterCategoryCmpt\n  },\n  props: {\n    month: {\n      type: Number,\n      required: true\n    }\n  },\n  created: async function () {\n    this.getBudgetData()\n  },\n  watch: {\n    account: async function () {\n      this.getBudgetData()\n    },\n    budget: async function () {\n      this.getBudgetData()\n    },\n    budgetMonth: async function () {\n      this.getBudgetData()\n    }\n  },\n  data (): BudgetCmptData {\n    return {\n      categoryDataList: {},\n      /* use former allocation to compute the new \"available\" value\n        newAvailable = available + newAllocation - formerAllocation\n        without asking the back-end to compute */\n      formerAllocations: {},\n      budgetMonth: this.$props.month,\n      amountInBudget: 0,\n      archiveVisible: false\n    }\n  },\n  computed: {\n    budget (): Budget | null {\n      return this.$store.state.budget\n    },\n    accounts (): Account[] | null {\n      return this.$store.state.accounts\n    },\n    totalBudgetData () {\n      const totalBudgetData = new CategoryData()\n      for (const categoryId in this.categoryDataList) {\n        totalBudgetData.allocated += this.categoryDataList[categoryId].allocated\n        totalBudgetData.spent += this.categoryDataList[categoryId].spent\n        totalBudgetData.available += this.categoryDataList[categoryId].available\n      }\n      return totalBudgetData\n    },\n    isThisYear (): boolean {\n      return Time.monthIsThisYear(this.budgetMonth)\n    },\n    toBeBudgeted (): number {\n      let toBeBudgeted = this.amountInBudget\n      for (const categoryId in this.categoryDataList) {\n        toBeBudgeted -= this.categoryDataList[categoryId].available\n      }\n      return toBeBudgeted\n    },\n    toBeBudgetedClass (): string {\n      if (this.toBeBudgeted > 0) {\n        return 'positive'\n      } else if (this.toBeBudgeted < 0) {\n        return 'negative'\n      } else {\n        return 'null'\n      }\n    }\n  },\n  methods: {\n    async getBudgetData () {\n      if (this.budget) {\n        BudgetDataService.getBudgetDataForMonth(this.budget, this.budgetMonth).then(\n          (categoryDataList) => {\n            this.categoryDataList = categoryDataList\n            this.initFormerAllocation()\n          }\n        )\n        BudgetDataService.getBudgetAmount(this.budget, this.budgetMonth).then(\n          (amount) => {\n            this.amountInBudget = amount\n          }\n        )\n      }\n    },\n    initFormerAllocation () {\n      let category\n      for (const categoryId in this.categoryDataList) {\n        category = this.categoryDataList[categoryId]\n        this.formerAllocations[categoryId] = category.allocated\n      }\n    },\n    updateAllocation (categoryId: string, newAllocation: number) {\n      if (!this.categoryDataList[categoryId]) {\n        this.categoryDataList[categoryId] = new CategoryData()\n      }\n      this.categoryDataList[categoryId].available +=\n        newAllocation - (this.formerAllocations[categoryId] || 0)\n      this.categoryDataList[categoryId].allocated = newAllocation\n      this.formerAllocations[categoryId] = newAllocation\n      AllocationService.updateAllocation(this.budgetMonth, categoryId, newAllocation)\n    },\n    getMonthAsDate (monthAsInt: number): Date {\n      return Time.getMonthAsDate(monthAsInt)\n    },\n    goToNextMonth () {\n      this.budgetMonth = Time.getNextMonth(this.budgetMonth)\n    },\n    goToLastMonth () {\n      this.budgetMonth = Time.getLastMonth(this.budgetMonth)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createMasterCategory () {\n      if (this.budget) {\n        MasterCategoryService.createMasterCategory('New Master Category', this.budget).then(\n          () => {\n            StoreHandler.updateMasterCategories(this.$store)\n            StoreHandler.updateCategories(this.$store)\n          }\n        )\n      }\n    }\n  }\n})\n</script>\n","import { Budget, BudgetData, CategoryDataList } from '@/model/model'\nimport { budgetApi, budgetDataApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class BudgetDataService {\n  public static async getDefaultBudget (): Promise<Budget> {\n    const response = await budgetApi.findBudgetsByUser()\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data[0]\n  }\n\n  public static async getBudgetData (budget: Budget): Promise<BudgetData> {\n    if (budget.id == null) { return [] }\n    const response = await budgetDataApi.findBudgetData(budget.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data\n  }\n\n  public static async getBudgetDataForMonth (budget: Budget, month: number): Promise<CategoryDataList> {\n    if (budget.id == null) { return {} }\n    const response = await budgetDataApi.findBudgetData(budget.id, month, month)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data[month]\n  }\n\n  public static async getBudgetAmount (budget: Budget, month: number): Promise<number> {\n    if (budget.id == null) { return 0 }\n    const response = await budgetDataApi.findTotalBudgetAmount(budget.id, month)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data\n  }\n}\n","import { allocationApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class AllocationService {\n  public static async updateAllocation (month: number, categoryId: string, amount: number) {\n    const response = await allocationApi.addAllocation(month, categoryId, amount)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n}\n","import { Operation, Account, Budget, Category, CategoryData as ICategoryData, MasterCategory } from '@/services/api/openApi/api'\n\ninterface BudgetData {\n    [monthComparable: number]: CategoryDataList;\n}\n\ninterface CategoryDataList {\n    [categoryId: string]: CategoryData;\n}\n\nclass CategoryData implements ICategoryData {\n    allocated = 0;\n    spent = 0;\n    available = 0;\n}\n\nconst incomeCategoryId = 'universal_income_category'\nconst transfertCategoryId = 'universal_transfert_category'\n\nexport {\n  Operation, CategoryData, BudgetData, Account, Budget, Category, MasterCategory, CategoryDataList, incomeCategoryId, transfertCategoryId\n}\n","<template>\n  <template v-if=\"this.categories.length > 0\">\n    <tr class=\"masterCategory\">\n      <th class=\"col-6 name\">\n        <div>\n          <MasterCategoryForm v-if=\"focusOn === masterCategory.id\" :masterCategory=\"masterCategory\" :archived=\"archived\" @looses-focus=\"loosesFocus\" @create-category=\"createCategory\"/>\n          <div v-else>\n            <button class=\"btn fas fa-plus\" v-on:click=\"createCategory\"/>\n            <a  v-on:click=\"this.putFocusOn(masterCategory.id)\">\n              <button class=\"btn fas fa-pen\"/>{{ masterCategory?.name }}\n            </a>\n          </div>\n        </div>\n      </th>\n      <th class=\"col-2 allocated\">{{ getEurosAmount(masterCategoryData.allocated)}}</th>\n      <th class=\"col-2 spent\">{{ getEurosAmount(masterCategoryData.spent) }}</th>\n      <th class=\"col-2 available\">\n        <span :class=\"masterCategoryData.available < 0 ? 'negative' : 'positive'\">\n          {{ getEurosAmount(masterCategoryData.available) }}\n        </span>\n      </th>\n    </tr>\n    <tbody>\n    <tr class=\"category\" v-for=\"category of this.categories\" :key=\"category\">\n      <td class=\"name\">\n        <div>\n          <CategoryForm v-if=\"focusOn === category.id\" :category=\"category\" @looses-focus=\"loosesFocus\"/>\n          <a v-else v-on:click=\"this.putFocusOn(category.id)\"><button class=\"btn fas fa-pen\"/>{{ category.name}} </a>\n        </div>\n      </td>\n      <td class=\"allocated\">\n        <span v-if=\"archived\">{{ this.categoryDataList[category.id]?.allocated ?? \"\" }}</span>\n        <input v-else type=\"number\" class=\"allocationInput\"\n        :value=\"this.getEurosAmount(this.categoryDataList[category.id]?.allocated ?? 0)\"\n        v-on:change=\"updateAllocationOnChange(category.id, $event.target.value)\"\n        >\n        </td>\n      <td class=\"spent\">\n          {{ getEurosAmount(this.categoryDataList[category.id]?.spent ?? \"\") }}\n      </td>\n      <td class=\"available\">\n        <span v-if=\"this.categoryDataList[category.id] && this.categoryDataList[category.id].available != 0\" :class=\"this.categoryDataList[category.id]?.available < 0 ? 'negative' : 'positive'\">\n          {{ getEurosAmount(this.categoryDataList[category.id]?.available) }}\n        </span>\n      </td>\n    </tr>\n    </tbody>\n  </template>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { MasterCategory, CategoryDataList, CategoryData, Category } from '@/model/model'\nimport Utils from '@/utils/Utils'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport CategoryForm from '@/components/forms/CategoryForm.vue'\nimport MasterCategoryForm from '@/components/forms/MasterCategoryForm.vue'\n\nexport default defineComponent({\n  name: 'MasterCategoryCmpt',\n  components: {\n    CategoryForm,\n    MasterCategoryForm\n  },\n  emits: ['updateAllocation'],\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    categoryDataList: {\n      type: Object as () => CategoryDataList,\n      required: true\n    },\n    archived: {\n      type: Boolean as () => boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      focusOn: ''\n    }\n  },\n  computed: {\n    categories (): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, this.masterCategory, this.archived)\n    },\n    masterCategoryData () {\n      const masterCategoryData = new CategoryData()\n      for (const category of this.categories) {\n        masterCategoryData.allocated += this.categoryDataList[category.id]?.allocated ?? 0\n        masterCategoryData.spent += this.categoryDataList[category.id]?.spent ?? 0\n        masterCategoryData.available += this.categoryDataList[category.id]?.available ?? 0\n      }\n      return masterCategoryData\n    }\n  },\n  methods: {\n    updateAllocationOnChange (categoryId: string, value: string) {\n      this.$emit('updateAllocation', categoryId, Utils.getCentsAmount(+value))\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createCategory () {\n      CategoryService.createCategory('New Category', this.masterCategory).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n        }\n      )\n    },\n    putFocusOn (categoryId: string) {\n      this.focusOn = categoryId\n    },\n    loosesFocus () {\n      this.focusOn = ''\n    }\n  }\n})\n</script>\n","export default class Utils {\n  public static getEurosAmount (centsAmount: number): number {\n    return (centsAmount / 100)\n  }\n\n  public static getCentsAmount (eurosAmount: number): number {\n    return Math.round(+eurosAmount * 100)\n  }\n}\n","<template>\n  <div v-if=\"this.category.archived\" id=\"operationForm\" class=\"operation\">\n    <span class=\"name\">{{ this.name }}</span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-level-up-alt\" v-on:click=\"unarchiveCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n    </span>\n  </div>\n  <div v-else id=\"operationForm\" class=\"operation\">\n    <span class=\"name\"><input id=\"newName\" class=\"form-control\" v-model=\"name\"></span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-check\" v-on:click=\"updateCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n      <button class=\"btn fas fa-archive\" v-on:click=\"archiveCategory\"/>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport { Category } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.category.name\n    }\n  },\n  props: {\n    category: {\n      type: Object as () => Category,\n      required: true\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateCategory () {\n      CategoryService.updateCategory(this.category.id, this.name).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveCategory () {\n      CategoryService.archiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveCategory () {\n      CategoryService.unarchiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport { Category } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.category.name\n    }\n  },\n  props: {\n    category: {\n      type: Object as () => Category,\n      required: true\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateCategory () {\n      CategoryService.updateCategory(this.category.id, this.name).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveCategory () {\n      CategoryService.archiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveCategory () {\n      CategoryService.unarchiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n","import { render } from \"./CategoryForm.vue?vue&type=template&id=c05ac20e\"\nimport script from \"./CategoryForm.vue?vue&type=script&lang=ts\"\nexport * from \"./CategoryForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div v-if=\"this.archived\" id=\"operationForm\" class=\"operation\">\n    <span class=\"name\">{{ this.name }}</span>\n     <span class=\"validation\">\n      <button class=\"btn fas fa-level-up-alt\" v-on:click=\"unarchiveMasterCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n    </span>\n  </div>\n  <div v-else id=\"operationForm\" class=\"operation\">\n    <span class=\"name\"><input id=\"newName\" class=\"form-control\" v-model=\"name\"></span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-check\" v-on:click=\"updateMasterCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n      <button class=\"btn fas fa-archive\" v-on:click=\"archiveMasterCategory\"/>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { MasterCategory } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.masterCategory.name\n    }\n  },\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    archived: {\n      type: Object as () => boolean,\n      required: false\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateMasterCategory () {\n      MasterCategoryService.renameMasterCategory(this.masterCategory.id, this.name).then(\n        () => {\n          StoreHandler.updateMasterCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveMasterCategory () {\n      MasterCategoryService.archiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveMasterCategory () {\n      MasterCategoryService.unarchiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { MasterCategory } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.masterCategory.name\n    }\n  },\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    archived: {\n      type: Object as () => boolean,\n      required: false\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateMasterCategory () {\n      MasterCategoryService.renameMasterCategory(this.masterCategory.id, this.name).then(\n        () => {\n          StoreHandler.updateMasterCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveMasterCategory () {\n      MasterCategoryService.archiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveMasterCategory () {\n      MasterCategoryService.unarchiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n","import { render } from \"./MasterCategoryForm.vue?vue&type=template&id=640cc3a5\"\nimport script from \"./MasterCategoryForm.vue?vue&type=script&lang=ts\"\nexport * from \"./MasterCategoryForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport { MasterCategory, CategoryDataList, CategoryData, Category } from '@/model/model'\nimport Utils from '@/utils/Utils'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport CategoryForm from '@/components/forms/CategoryForm.vue'\nimport MasterCategoryForm from '@/components/forms/MasterCategoryForm.vue'\n\nexport default defineComponent({\n  name: 'MasterCategoryCmpt',\n  components: {\n    CategoryForm,\n    MasterCategoryForm\n  },\n  emits: ['updateAllocation'],\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    categoryDataList: {\n      type: Object as () => CategoryDataList,\n      required: true\n    },\n    archived: {\n      type: Boolean as () => boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      focusOn: ''\n    }\n  },\n  computed: {\n    categories (): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, this.masterCategory, this.archived)\n    },\n    masterCategoryData () {\n      const masterCategoryData = new CategoryData()\n      for (const category of this.categories) {\n        masterCategoryData.allocated += this.categoryDataList[category.id]?.allocated ?? 0\n        masterCategoryData.spent += this.categoryDataList[category.id]?.spent ?? 0\n        masterCategoryData.available += this.categoryDataList[category.id]?.available ?? 0\n      }\n      return masterCategoryData\n    }\n  },\n  methods: {\n    updateAllocationOnChange (categoryId: string, value: string) {\n      this.$emit('updateAllocation', categoryId, Utils.getCentsAmount(+value))\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createCategory () {\n      CategoryService.createCategory('New Category', this.masterCategory).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n        }\n      )\n    },\n    putFocusOn (categoryId: string) {\n      this.focusOn = categoryId\n    },\n    loosesFocus () {\n      this.focusOn = ''\n    }\n  }\n})\n","import { render } from \"./MasterCategoryCmpt.vue?vue&type=template&id=1e2e4693\"\nimport script from \"./MasterCategoryCmpt.vue?vue&type=script&lang=ts\"\nexport * from \"./MasterCategoryCmpt.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport BudgetDataService from '@/services/BudgetDataService'\nimport AllocationService from '@/services/AllocationService'\nimport { Account, Budget, CategoryData, CategoryDataList } from '@/model/model'\nimport MasterCategoryCmpt from './MasterCategoryCmpt.vue'\nimport Time from '@/utils/Time'\nimport Utils from '@/utils/Utils'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport StoreHandler from '@/store/StoreHandler'\n\ninterface BudgetCmptData {\n    categoryDataList: CategoryDataList;\n    formerAllocations: {\n        [categoryId: string]: number;\n    };\n    budgetMonth: number;\n    amountInBudget: number;\n    archiveVisible: boolean;\n}\n\nexport default defineComponent({\n  name: 'BudgetCmpt',\n  components: {\n    MasterCategoryCmpt\n  },\n  props: {\n    month: {\n      type: Number,\n      required: true\n    }\n  },\n  created: async function () {\n    this.getBudgetData()\n  },\n  watch: {\n    account: async function () {\n      this.getBudgetData()\n    },\n    budget: async function () {\n      this.getBudgetData()\n    },\n    budgetMonth: async function () {\n      this.getBudgetData()\n    }\n  },\n  data (): BudgetCmptData {\n    return {\n      categoryDataList: {},\n      /* use former allocation to compute the new \"available\" value\n        newAvailable = available + newAllocation - formerAllocation\n        without asking the back-end to compute */\n      formerAllocations: {},\n      budgetMonth: this.$props.month,\n      amountInBudget: 0,\n      archiveVisible: false\n    }\n  },\n  computed: {\n    budget (): Budget | null {\n      return this.$store.state.budget\n    },\n    accounts (): Account[] | null {\n      return this.$store.state.accounts\n    },\n    totalBudgetData () {\n      const totalBudgetData = new CategoryData()\n      for (const categoryId in this.categoryDataList) {\n        totalBudgetData.allocated += this.categoryDataList[categoryId].allocated\n        totalBudgetData.spent += this.categoryDataList[categoryId].spent\n        totalBudgetData.available += this.categoryDataList[categoryId].available\n      }\n      return totalBudgetData\n    },\n    isThisYear (): boolean {\n      return Time.monthIsThisYear(this.budgetMonth)\n    },\n    toBeBudgeted (): number {\n      let toBeBudgeted = this.amountInBudget\n      for (const categoryId in this.categoryDataList) {\n        toBeBudgeted -= this.categoryDataList[categoryId].available\n      }\n      return toBeBudgeted\n    },\n    toBeBudgetedClass (): string {\n      if (this.toBeBudgeted > 0) {\n        return 'positive'\n      } else if (this.toBeBudgeted < 0) {\n        return 'negative'\n      } else {\n        return 'null'\n      }\n    }\n  },\n  methods: {\n    async getBudgetData () {\n      if (this.budget) {\n        BudgetDataService.getBudgetDataForMonth(this.budget, this.budgetMonth).then(\n          (categoryDataList) => {\n            this.categoryDataList = categoryDataList\n            this.initFormerAllocation()\n          }\n        )\n        BudgetDataService.getBudgetAmount(this.budget, this.budgetMonth).then(\n          (amount) => {\n            this.amountInBudget = amount\n          }\n        )\n      }\n    },\n    initFormerAllocation () {\n      let category\n      for (const categoryId in this.categoryDataList) {\n        category = this.categoryDataList[categoryId]\n        this.formerAllocations[categoryId] = category.allocated\n      }\n    },\n    updateAllocation (categoryId: string, newAllocation: number) {\n      if (!this.categoryDataList[categoryId]) {\n        this.categoryDataList[categoryId] = new CategoryData()\n      }\n      this.categoryDataList[categoryId].available +=\n        newAllocation - (this.formerAllocations[categoryId] || 0)\n      this.categoryDataList[categoryId].allocated = newAllocation\n      this.formerAllocations[categoryId] = newAllocation\n      AllocationService.updateAllocation(this.budgetMonth, categoryId, newAllocation)\n    },\n    getMonthAsDate (monthAsInt: number): Date {\n      return Time.getMonthAsDate(monthAsInt)\n    },\n    goToNextMonth () {\n      this.budgetMonth = Time.getNextMonth(this.budgetMonth)\n    },\n    goToLastMonth () {\n      this.budgetMonth = Time.getLastMonth(this.budgetMonth)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createMasterCategory () {\n      if (this.budget) {\n        MasterCategoryService.createMasterCategory('New Master Category', this.budget).then(\n          () => {\n            StoreHandler.updateMasterCategories(this.$store)\n            StoreHandler.updateCategories(this.$store)\n          }\n        )\n      }\n    }\n  }\n})\n","import { render } from \"./BudgetCmpt.vue?vue&type=template&id=20bd3597\"\nimport script from \"./BudgetCmpt.vue?vue&type=script&lang=ts\"\nexport * from \"./BudgetCmpt.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div id=\"accountWidget\">\n    <div class=\"row\">\n    <h1>{{$t('MY_ACCOUNTS')}}</h1>\n    </div>\n    <span class=\"total\"> total : {{this.getEurosAmount(this.totalOnAccounts)}} €</span>\n    <ul>\n      <li class=\"account\" v-for=\"account of this.$store.state.accounts\" :key=\"account\">\n        <button class=\"btn\" v-on:click=\"goToAccountPage(account)\">{{ account.name }} : {{this.getEurosAmount(account.amount)}} €</button>\n      </li>\n      <li class=\"accountForm\">\n        <div v-if=\"!accountCreationFormIsDisplayed\">\n          <button class=\"btn displayFormBtn\" v-on:click=\"changeAccountCreationFormDisplay\" >\n            <span >{{$t('ADD_ACCOUNT')}}</span>\n          </button>\n        </div>\n        <div v-else class=\"closeBtnContainer\">\n          <button class=\"btn closeFormBtn\" v-on:click=\"changeAccountCreationFormDisplay\">\n            <span>x</span>\n          </button>\n        </div>\n        <div class=\"formContainer\" v-if=\"accountCreationFormIsDisplayed\">\n          <AccountCreationForm @update-account-list=\"getAccounts\" @close-form=\"changeAccountCreationFormDisplay\" />\n        </div>\n      </li>\n    </ul>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport AccountCreationForm from '@/components/forms/AccountCreationForm.vue'\nimport router, { RouterPages } from '@/router'\nimport { Account } from '@/model/model'\nimport Utils from '@/utils/Utils'\n\ninterface AccountsWidgetData {\n    accountCreationFormIsDisplayed: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountsWidget',\n  components: {\n    AccountCreationForm\n  },\n  data (): AccountsWidgetData {\n    return {\n      accountCreationFormIsDisplayed: false\n    }\n  },\n  computed: {\n    totalOnAccounts (): number {\n      let total = 0\n      for (const account of this.$store.state.accounts) {\n        total += account.amount\n      }\n      return total\n    }\n  },\n  methods: {\n    goToAccountPage (account: Account) {\n      router.push({ path: RouterPages.account, query: { accountId: account.id } })\n    },\n    changeAccountCreationFormDisplay () {\n      this.$data.accountCreationFormIsDisplayed = !this.$data.accountCreationFormIsDisplayed\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n</script>\n","<template>\n  <div id=\"accountCreationForm\">\n    <input id=\"newAccountName\" class=\"form-control\" v-model=\"name\" :placeholder=\"$t('ACCOUNT_NAME')\">\n    <label for=\"newAccountAmount\">{{ $t('INITIAL_AMOUNT') }}</label>\n    <input id=\"newAccountAmount\" class=\"form-control\" v-model.number=\"amount\">\n    <button class=\"btn btn-outline-info\" v-on:click=\"createAccount\">{{$t('CREATE_ACCOUNT')}}</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport AccountService from '@/services/AccountService'\nimport Utils from '@/utils/Utils'\n\nexport default defineComponent({\n  name: 'AccountCreationForm',\n  data () {\n    return {\n      name: '',\n      amount: 0\n    }\n  },\n  emits: ['updateAccountList', 'closeForm'],\n  methods: {\n    createAccount () {\n      if (this.$store.state.budget) {\n        AccountService.createAccount(this.$store.state.budget, this.name, Utils.getCentsAmount(this.amount)).then(\n          () => {\n            this.$emit('updateAccountList')\n            this.$emit('closeForm')\n          }\n        )\n      }\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport AccountService from '@/services/AccountService'\nimport Utils from '@/utils/Utils'\n\nexport default defineComponent({\n  name: 'AccountCreationForm',\n  data () {\n    return {\n      name: '',\n      amount: 0\n    }\n  },\n  emits: ['updateAccountList', 'closeForm'],\n  methods: {\n    createAccount () {\n      if (this.$store.state.budget) {\n        AccountService.createAccount(this.$store.state.budget, this.name, Utils.getCentsAmount(this.amount)).then(\n          () => {\n            this.$emit('updateAccountList')\n            this.$emit('closeForm')\n          }\n        )\n      }\n    }\n  }\n})\n","import { render } from \"./AccountCreationForm.vue?vue&type=template&id=0c4f2674\"\nimport script from \"./AccountCreationForm.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountCreationForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport AccountCreationForm from '@/components/forms/AccountCreationForm.vue'\nimport router, { RouterPages } from '@/router'\nimport { Account } from '@/model/model'\nimport Utils from '@/utils/Utils'\n\ninterface AccountsWidgetData {\n    accountCreationFormIsDisplayed: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountsWidget',\n  components: {\n    AccountCreationForm\n  },\n  data (): AccountsWidgetData {\n    return {\n      accountCreationFormIsDisplayed: false\n    }\n  },\n  computed: {\n    totalOnAccounts (): number {\n      let total = 0\n      for (const account of this.$store.state.accounts) {\n        total += account.amount\n      }\n      return total\n    }\n  },\n  methods: {\n    goToAccountPage (account: Account) {\n      router.push({ path: RouterPages.account, query: { accountId: account.id } })\n    },\n    changeAccountCreationFormDisplay () {\n      this.$data.accountCreationFormIsDisplayed = !this.$data.accountCreationFormIsDisplayed\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n","import { render } from \"./AccountsWidget.vue?vue&type=template&id=50b363b3\"\nimport script from \"./AccountsWidget.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountsWidget.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { personApi } from '@/services/api/apis'\nimport router, { RouterPages, redirectToLoginPageIfUnauthorizedError, redirectToLoginPageIfNotLogged } from '@/router'\nimport axios from 'axios'\n\ninterface LoginResponse {\n    name: string;\n    unlockingDate: number;\n}\n\nexport default class PersonService {\n  public static async createSession (store: Store<StoreState>, email: string, password: string): Promise<LoginResponse> {\n    let data\n    let response\n    try {\n      response = await personApi.createSession(email, password)\n      data = response.data\n      store.dispatch('updateLogged')\n      router.push(RouterPages.home)\n    } catch (exception) {\n      if (axios.isAxiosError(exception)) {\n        response = exception.response\n        data = (response) ? response.data : {}\n      }\n    }\n    return JSON.parse(data)\n  }\n\n  public static async deleteSession (store: Store<StoreState>) {\n    const response = await personApi.deleteSession()\n    redirectToLoginPageIfUnauthorizedError(response)\n    store.dispatch('updateLogged')\n    redirectToLoginPageIfNotLogged(store)\n  }\n}\n","<template>\n  <div class=\"image-spinner\">\n    <img src=\"@/assets/logo_round.png\"/>\n    <div class=\"spin spinner\"></div>\n    <div>{{$t('LOADING')}}</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LoaderCmpt'\n})\n</script>\n","\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LoaderCmpt'\n})\n","import { render } from \"./Loader.vue?vue&type=template&id=2a375deb\"\nimport script from \"./Loader.vue?vue&type=script&lang=ts\"\nexport * from \"./Loader.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport BudgetCmpt from '@/components/BudgetCmpt.vue' // @ is an alias to /src\nimport AccountsWidget from '@/components/AccountsWidget.vue'\nimport PersonService from '@/services/PersonService'\nimport Time from '@/utils/Time'\nimport Loader from '@/components/utils/Loader.vue'\n\nexport default defineComponent({\n  name: 'Home',\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n  },\n  components: {\n    BudgetCmpt,\n    AccountsWidget,\n    Loader\n  },\n  data () {\n    return {\n      currentMonth: Time.getCurrentMonth()\n    }\n  },\n  methods: {\n    logout () {\n      PersonService.deleteSession(this.$store)\n    }\n  }\n})\n","import { render } from \"./Home.vue?vue&type=template&id=591a033a\"\nimport script from \"./Home.vue?vue&type=script&lang=ts\"\nexport * from \"./Home.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div id=\"login_page\">\n    <img id=\"logo\" alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <input class=\"form-control\" v-model=\"email\" :placeholder=\"$t('EMAIL')\">\n    <input class=\"form-control\" type=\"password\" v-model=\"password\" :placeholder=\"$t('PASSWORD')\">\n    <button class=\"btn btn-info\" v-on:click=\"login\">{{$t('LOGIN')}}</button>\n    <p id=\"login_error_msg\">{{errorMsg}}</p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\n\nexport default defineComponent({\n  name: 'Login',\n  components: {},\n  data () {\n    return {\n      email: '',\n      password: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async login () {\n      const responseData = await PersonService.createSession(this.$store, this.email, this.password)\n      if (responseData.unlockingDate !== null) {\n        const minutes = 1000 * 60\n        const lockingDuration = Math.round((responseData.unlockingDate - new Date().getTime()) / minutes)\n        if (lockingDuration > 0) {\n          this.$data.errorMsg = this.$t('SORRY_LOCKED_OUT', { lockingDuration: lockingDuration })\n        } else {\n          this.$data.errorMsg = this.$t('SORRY_WRONG_PASSWORD')\n        }\n      } else {\n        this.$data.errorMsg = this.$t('SORRY_WRONG_LOGIN')\n      }\n    }\n  }\n\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n#logo {\n  height: 80px;\n}\n</style>\n","\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\n\nexport default defineComponent({\n  name: 'Login',\n  components: {},\n  data () {\n    return {\n      email: '',\n      password: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async login () {\n      const responseData = await PersonService.createSession(this.$store, this.email, this.password)\n      if (responseData.unlockingDate !== null) {\n        const minutes = 1000 * 60\n        const lockingDuration = Math.round((responseData.unlockingDate - new Date().getTime()) / minutes)\n        if (lockingDuration > 0) {\n          this.$data.errorMsg = this.$t('SORRY_LOCKED_OUT', { lockingDuration: lockingDuration })\n        } else {\n          this.$data.errorMsg = this.$t('SORRY_WRONG_PASSWORD')\n        }\n      } else {\n        this.$data.errorMsg = this.$t('SORRY_WRONG_LOGIN')\n      }\n    }\n  }\n\n})\n","import { render } from \"./Login.vue?vue&type=template&id=23c404fd&scoped=true\"\nimport script from \"./Login.vue?vue&type=script&lang=ts\"\nexport * from \"./Login.vue?vue&type=script&lang=ts\"\n\nimport \"./Login.vue?vue&type=style&index=0&id=23c404fd&scoped=true&lang=less\"\nscript.render = render\nscript.__scopeId = \"data-v-23c404fd\"\n\nexport default script","<template >\n  <div :class=\"this.$store.state.css\">\n    <div class=\"accountPage row col-md-8 offset-md-2\">\n      <h1> {{ (this.account) ? this.account.name : ''}} : {{ (this.account) ? getEurosAmount(this.account.amount) : ''}}€</h1>\n      <table class=\"operationTable table table-hover\" >\n          <tr class=\"\">\n            <th class=\"date col-md-1\"><div>{{ $t(\"DATE\") }}</div></th>\n            <th class=\"category col-md-4\">{{ $t(\"CATEGORY\") }}</th>\n            <th class=\"memo col-md-4\">{{ $t(\"MEMO\") }}</th>\n            <th class=\"amount col-md-2\">{{ $t(\"AMOUNT\") }}</th>\n            <th class=\"action col-md-1\">{{ $t(\"ACTION\") }}</th>\n          </tr>\n          <tbody>\n          <OperationForm @update-operation-list=\"getAccountOperation\" :accountId=\"this.accountId\" />\n          <template v-for=\"operation in this.operations\" :key=\"operation\">\n            <OperationForm v-if=\"operation.editing\" @update-operation-list=\"getAccountOperation\" :accountId=\"this.accountId\" :operation=\"operation\"/>\n            <tr class=\"operation storedOperation\" v-else>\n              <td class=\"date\"><div>{{ $d(this.getDayAsDate(operation.day), 'day') }}</div></td>\n              <td class=\"category\">{{ this.getCategoryById(operation.categoryId)?.name ?? $t(\"UNKNOWN_CATEGORY\") }}</td>\n              <td class=\"memo\">{{ operation.memo }}</td>\n              <td class=\"amount\">{{ this.getEurosAmount(operation.amount) }}</td>\n              <td class=\"action\">\n                <button class=\"btn fas fa-pen\" v-on:click=\"setAsEditing(operation)\" :title=\"$t('EDIT')\"/>\n                <button class=\"btn fas fa-trash\" v-on:click=\"deleteOperation(operation)\" :title=\"$t('DELETE')\"/>\n              </td>\n            </tr>\n          </template>\n          </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport { Account, Category, Operation } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport OperationService from '@/services/OperationService'\nimport OperationForm from '@/components/forms/OperationForm.vue'\nimport Utils from '@/utils/Utils'\n\ninterface AccountPageData {\n    operations: EditableOperation[];\n}\n\ninterface EditableOperation extends Operation {\n    editing: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountPage',\n  components: {\n    OperationForm\n  },\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n    this.getAccountOperation()\n  },\n  watch: {\n    account: async function () {\n      this.getAccountOperation()\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    }\n  },\n  data (): AccountPageData {\n    return {\n      operations: []\n    }\n  },\n  computed: {\n    account (): Account | null {\n      for (const account of this.$store.state.accounts) {\n        if (account.id === this.accountId) {\n          return account\n        }\n      }\n      return null\n    }\n  },\n  methods: {\n    async getAccountOperation () {\n      if (this.account) {\n        return OperationService.getOperations(this.account).then(\n          (operations) => {\n            this.operations = this.operationToEditableOperation(operations)\n          }\n        )\n      }\n    },\n    getDayAsDate (dayAsInt: number): Date {\n      return Time.getDateFromDay(dayAsInt)\n    },\n    deleteOperation (operation: Operation) {\n      OperationService.deleteOperation(this.$store, operation).then(\n        () => {\n          this.getAccountOperation()\n        }\n      )\n    },\n    setAsEditing (operation: EditableOperation) {\n      operation.editing = true\n    },\n    operationToEditableOperation (operations: Operation[]): EditableOperation[] {\n      const editableOperations: EditableOperation[] = []\n      operations.forEach((operation) =>\n        editableOperations.push(\n          {\n            id: operation.id,\n            day: operation.day,\n            accountId: operation.accountId,\n            categoryId: operation.categoryId,\n            amount: operation.amount,\n            memo: operation.memo,\n            editing: false\n          }\n        )\n      )\n      return editableOperations\n    },\n    getCategoryById (categoryId: string): Category | null {\n      return StoreHandler.getCategoryById(this.$store, categoryId)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n</script>\n","import { Account, Operation } from '@/model/model'\nimport { operationApi } from '@/services/api/apis'\nimport StoreHandler from '@/store/StoreHandler'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class OperationService {\n  public static async getOperations (account: Account): Promise<Operation[]> {\n    let data: Operation[] = []\n    if (account.id) {\n      const response = await operationApi.findOperationsByAccount(account.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      data = response.data\n    }\n    return data\n  }\n\n  public static async addOperation (store: Store<StoreState>, accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string) {\n    const response = await operationApi.addOperation(accountId, day, categoryId, amount, memo)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n\n  public static async deleteOperation (store: Store<StoreState>, operation: Operation) {\n    const response = await operationApi.deleteOperation(operation.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n\n  public static async updateOperation (store: Store<StoreState>, operation: Operation, accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string) {\n    const response = await operationApi.updateOperation(operation.id, accountId, day, categoryId, amount, memo)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n}\n","<template>\n  <tr id=\"operationForm\" class=\"operation\">\n    <td class=\"date\"><input id=\"newOperationDate\" type=\"date\" class=\"form-control\" v-model=\"date\"></td>\n    <td class=\"category\">\n      <select id=\"newOperationCategory\" class=\"form-control\" v-model=\"categoryId\" >\n        <option disabled value=\"\">{{$t('SELECT_CATEGORY')}}</option>\n        <option v-bind:value=\"incomeCategoryId\">{{$t('I18N_INCOME')}}</option>\n        <option v-bind:value=\"transfertCategoryId\">{{$t('I18N_TRASNFERT')}}</option>\n        <optgroup v-for=\"masterCategory of this.$store.state.masterCategories\" :key=\"masterCategory\" v-bind:value=\"masterCategory.id\" :label=\"masterCategory.name\">\n          <option v-for=\"category of this.getCategoriesByMasterCategory(masterCategory)\" :key=\"category\" v-bind:value=\"category.id\">{{category.name}}</option>\n        </optgroup>\n        <optgroup :label=\"$t('ARCHIVED_CATEGORIES')\">\n          <option v-for=\"category of this.getArchivedCategories()\" :key=\"category\" v-bind:value=\"category.id\">{{category.name}}</option>\n        </optgroup>\n      </select>\n    </td>\n    <td class=\"memo\"><input id=\"newOperationMemo\" class=\"form-control\" v-model=\"memo\"></td>\n    <td class=\"amount\">\n      <div class=\"input-group flex-nowrap\">\n        <label class=\"switch\">\n          <input class=\"switch-input\" type=\"checkbox\" v-model=\"incoming\"/>\n          <span class=\"switch-label\" data-on=\"+\" data-off=\"-\" style=\"border-radius: 8px\"></span>\n          <span class=\"switch-handle\"></span>\n        </label>\n        <input id=\"newOperationAmount\" class=\"form-control\" v-model.number=\"amount\">\n      </div>\n    </td>\n    <td class=\"validation\">\n      <button v-if=\"this.operation\" class=\"btn fas fa-check\" v-on:click=\"updateOperation\" :title=\"$t('UPDATE')\"/>\n      <button v-else class=\"btn fas fa-check\" v-on:click=\"addOperation\" :title=\"$t('ADD')\"/>\n      </td>\n  </tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport OperationService from '@/services/OperationService'\nimport { Category, MasterCategory, Operation, incomeCategoryId, transfertCategoryId } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport Utils from '@/utils/Utils'\n\ninterface OperationFormData {\n  date: string;\n  categoryId: string;\n  memo: string;\n  incoming: boolean;\n  amount: number;\n}\n\nexport default defineComponent({\n  name: 'OperationForm',\n  data (): OperationFormData {\n    return {\n      date: this.operation ? Time.getDateStringFromDay(this.operation.day) : Time.getCurrentDateString(),\n      categoryId: this.operation?.categoryId || '',\n      memo: this.operation?.memo || '',\n      incoming: this.operation?.amount ? this.operation.amount > 0 : false,\n      amount: Utils.getEurosAmount(Math.abs(this.operation?.amount || 0))\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    },\n    operation: {\n      type: Object as () => Operation\n    }\n  },\n  computed: {\n    incomeCategoryId (): string {\n      return incomeCategoryId\n    },\n    transfertCategoryId (): string {\n      return transfertCategoryId\n    },\n    signedCentsAmount (): number {\n      return Utils.getCentsAmount((this.incoming) ? Math.abs(this.amount) : Math.abs(this.amount) * -1)\n    }\n  },\n  emits: ['updateOperationList'],\n  methods: {\n    updateOperation () {\n      if (this.operation) {\n        OperationService.updateOperation(this.$store, this.operation, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n          () => {\n            this.$emit('updateOperationList')\n          }\n        )\n      } else {\n        console.log('warning: tried to update without operation to update')\n      }\n    },\n    addOperation () {\n      OperationService.addOperation(this.$store, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n        () => {\n          this.$emit('updateOperationList')\n        }\n      )\n    },\n    getCategoriesByMasterCategory (masterCategory: MasterCategory): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, masterCategory, false)\n    },\n    getArchivedCategories (): Category[] {\n      return StoreHandler.getCategoriesByArchivedStatus(this.$store, true)\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport OperationService from '@/services/OperationService'\nimport { Category, MasterCategory, Operation, incomeCategoryId, transfertCategoryId } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport Utils from '@/utils/Utils'\n\ninterface OperationFormData {\n  date: string;\n  categoryId: string;\n  memo: string;\n  incoming: boolean;\n  amount: number;\n}\n\nexport default defineComponent({\n  name: 'OperationForm',\n  data (): OperationFormData {\n    return {\n      date: this.operation ? Time.getDateStringFromDay(this.operation.day) : Time.getCurrentDateString(),\n      categoryId: this.operation?.categoryId || '',\n      memo: this.operation?.memo || '',\n      incoming: this.operation?.amount ? this.operation.amount > 0 : false,\n      amount: Utils.getEurosAmount(Math.abs(this.operation?.amount || 0))\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    },\n    operation: {\n      type: Object as () => Operation\n    }\n  },\n  computed: {\n    incomeCategoryId (): string {\n      return incomeCategoryId\n    },\n    transfertCategoryId (): string {\n      return transfertCategoryId\n    },\n    signedCentsAmount (): number {\n      return Utils.getCentsAmount((this.incoming) ? Math.abs(this.amount) : Math.abs(this.amount) * -1)\n    }\n  },\n  emits: ['updateOperationList'],\n  methods: {\n    updateOperation () {\n      if (this.operation) {\n        OperationService.updateOperation(this.$store, this.operation, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n          () => {\n            this.$emit('updateOperationList')\n          }\n        )\n      } else {\n        console.log('warning: tried to update without operation to update')\n      }\n    },\n    addOperation () {\n      OperationService.addOperation(this.$store, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n        () => {\n          this.$emit('updateOperationList')\n        }\n      )\n    },\n    getCategoriesByMasterCategory (masterCategory: MasterCategory): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, masterCategory, false)\n    },\n    getArchivedCategories (): Category[] {\n      return StoreHandler.getCategoriesByArchivedStatus(this.$store, true)\n    }\n  }\n})\n","import { render } from \"./OperationForm.vue?vue&type=template&id=4e145cce\"\nimport script from \"./OperationForm.vue?vue&type=script&lang=ts\"\nexport * from \"./OperationForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport { Account, Category, Operation } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport OperationService from '@/services/OperationService'\nimport OperationForm from '@/components/forms/OperationForm.vue'\nimport Utils from '@/utils/Utils'\n\ninterface AccountPageData {\n    operations: EditableOperation[];\n}\n\ninterface EditableOperation extends Operation {\n    editing: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountPage',\n  components: {\n    OperationForm\n  },\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n    this.getAccountOperation()\n  },\n  watch: {\n    account: async function () {\n      this.getAccountOperation()\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    }\n  },\n  data (): AccountPageData {\n    return {\n      operations: []\n    }\n  },\n  computed: {\n    account (): Account | null {\n      for (const account of this.$store.state.accounts) {\n        if (account.id === this.accountId) {\n          return account\n        }\n      }\n      return null\n    }\n  },\n  methods: {\n    async getAccountOperation () {\n      if (this.account) {\n        return OperationService.getOperations(this.account).then(\n          (operations) => {\n            this.operations = this.operationToEditableOperation(operations)\n          }\n        )\n      }\n    },\n    getDayAsDate (dayAsInt: number): Date {\n      return Time.getDateFromDay(dayAsInt)\n    },\n    deleteOperation (operation: Operation) {\n      OperationService.deleteOperation(this.$store, operation).then(\n        () => {\n          this.getAccountOperation()\n        }\n      )\n    },\n    setAsEditing (operation: EditableOperation) {\n      operation.editing = true\n    },\n    operationToEditableOperation (operations: Operation[]): EditableOperation[] {\n      const editableOperations: EditableOperation[] = []\n      operations.forEach((operation) =>\n        editableOperations.push(\n          {\n            id: operation.id,\n            day: operation.day,\n            accountId: operation.accountId,\n            categoryId: operation.categoryId,\n            amount: operation.amount,\n            memo: operation.memo,\n            editing: false\n          }\n        )\n      )\n      return editableOperations\n    },\n    getCategoryById (categoryId: string): Category | null {\n      return StoreHandler.getCategoryById(this.$store, categoryId)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n","import { render } from \"./AccountPage.vue?vue&type=template&id=5d4c0736\"\nimport script from \"./AccountPage.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountPage.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Login from '../views/Login.vue'\nimport AccountPage from '../views/AccountPage.vue'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { AxiosResponse } from 'axios'\n\nexport enum RouterPages {\n  home = '/',\n  login = '/login',\n  account = '/account',\n  about = '/about'\n}\n\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: RouterPages.home,\n    component: Home\n  },\n  {\n    path: RouterPages.login,\n    component: Login\n  },\n  {\n    path: RouterPages.account,\n    component: AccountPage,\n    props: route => ({ accountId: route.query.accountId })\n  },\n  {\n    path: RouterPages.about,\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/About.vue')\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport function redirectToLoginPageIfNotLogged (store: Store<StoreState>) {\n  if (!store.state.logged) {\n    router.push(RouterPages.login)\n  }\n}\n\nexport function redirectToLoginPageIfUnauthorizedError (response: AxiosResponse) {\n  if (response.status === 401) {\n    router.push(RouterPages.login)\n  }\n}\n\nexport default router\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './registerServiceWorker'\nimport router from './router'\nimport { store, key } from './store'\nimport 'bootstrap'\nimport { createI18n } from 'vue-i18n'\nimport localeFR from '@/assets/locale/fr.json'\nimport localeEN from '@/assets/locale/en.json'\nimport localeDate from '@/assets/locale/dateformat.json'\nimport Properties from '@/../properties'\n\nconst messages = {\n  fr: localeFR,\n  en: localeEN\n}\n\nconst i18n = createI18n({ locale: 'fr', fallbackLocale: 'en', messages: messages, datetimeFormats: localeDate })\nconsole.log('version : ' + Properties.commitHash)\ncreateApp(App).use(store, key).use(router).use(i18n).mount('#app')\n","module.exports = __webpack_public_path__ + \"img/logo.0ca28574.png\";"],"sourceRoot":""}