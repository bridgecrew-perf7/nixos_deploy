{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?99f3","webpack:///./src/views/Login.vue?5151","webpack:///./src/views/Signup.vue?df18","webpack:///./src/assets/logo_round.png","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/registerServiceWorker.ts","webpack:///./src/views/Home.vue","webpack:///./properties.ts","webpack:///./src/services/api/openApi/base.ts","webpack:///./src/services/api/openApi/common.ts","webpack:///./src/services/api/openApi/api.ts","webpack:///./src/services/api/apis.ts","webpack:///./src/utils/Time.ts","webpack:///./src/services/AccountService.ts","webpack:///./src/services/BudgetService.ts","webpack:///./src/services/CategoryService.ts","webpack:///./src/services/MasterCategoryService.ts","webpack:///./src/store/StoreHandler.ts","webpack:///./src/components/BudgetCmpt.vue","webpack:///./src/services/BudgetDataService.ts","webpack:///./src/services/AllocationService.ts","webpack:///./src/model/model.ts","webpack:///./src/components/MasterCategoryCmpt.vue","webpack:///./src/utils/Utils.ts","webpack:///./src/components/forms/CategoryForm.vue","webpack:///./src/components/forms/CategoryForm.vue?a490","webpack:///./src/components/forms/CategoryForm.vue?2b8b","webpack:///./src/components/forms/MasterCategoryForm.vue","webpack:///./src/components/forms/MasterCategoryForm.vue?80fb","webpack:///./src/components/forms/MasterCategoryForm.vue?046f","webpack:///./src/components/MasterCategoryCmpt.vue?853a","webpack:///./src/components/MasterCategoryCmpt.vue?bb05","webpack:///./src/components/BudgetCmpt.vue?8292","webpack:///./src/components/BudgetCmpt.vue?8789","webpack:///./src/components/AccountsWidget.vue","webpack:///./src/components/forms/AccountCreationForm.vue","webpack:///./src/components/forms/AccountCreationForm.vue?3ce3","webpack:///./src/components/forms/AccountCreationForm.vue?1ffd","webpack:///./src/components/AccountsWidget.vue?5c29","webpack:///./src/components/AccountsWidget.vue?5889","webpack:///./src/services/PersonService.ts","webpack:///./src/components/utils/Loader.vue","webpack:///./src/components/utils/Loader.vue?8001","webpack:///./src/components/utils/Loader.vue?f372","webpack:///./src/views/Home.vue?d5e7","webpack:///./src/views/Home.vue?ab8c","webpack:///./src/views/Login.vue","webpack:///./src/views/Login.vue?e144","webpack:///./src/views/Login.vue?e63b","webpack:///./src/views/Signup.vue","webpack:///./src/views/Signup.vue?2c40","webpack:///./src/views/Signup.vue?c77e","webpack:///./src/views/AccountPage.vue","webpack:///./src/services/OperationService.ts","webpack:///./src/components/forms/OperationForm.vue","webpack:///./src/components/forms/OperationForm.vue?1c2a","webpack:///./src/components/forms/OperationForm.vue?6ade","webpack:///./src/views/AccountPage.vue?81f0","webpack:///./src/views/AccountPage.vue?f8d0","webpack:///./src/router/index.ts","webpack:///./src/store/index.ts","webpack:///./src/main.ts","webpack:///./src/assets/logo.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","jsonpScriptSrc","p","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","class","render","ready","log","registered","cached","updatefound","updated","offline","id","$store","state","css","storeLoaded","month","currentMonth","title","$t","logout","Properties","makeSuper","superTokenAxios","init","refreshTokenUrl","refreshUrl","server","replace","configuration","basePath","axios","this","field","msg","DUMMY_BASE_URL","functionName","paramName","paramValue","url","searchParams","URLSearchParams","search","objects","Array","isArray","delete","item","append","set","toString","toPathString","pathname","hash","axiosArgs","globalAxios","BASE_PATH","axiosRequestArgs","options","addAccount","budgetId","amount","day","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","deleteAccount","accountId","findAccountsByBudget","updateAccount","newName","localVarAxiosParamCreator","localVarAxiosArgs","then","addAllocation","categoryId","addBudget","deleteBudget","findBudgetsByUser","updateBudget","findBudgetData","startMonth","endMonth","findTotalBudgetAmount","addCategory","masterCategoryId","getCategoriesByBudget","updateCategory","newMasterCategoryId","newArchived","newDeleted","addMasterCategory","getMasterCategoriesByBudget","updateMasterCategory","addOperation","memo","deleteOperation","operationId","findOperationsByAccount","findOperationsByBudget","updateOperation","newAccountId","newDay","newCategoryId","newAmount","newMemo","createPerson","password","email","createSession","deleteSession","personApi","budgetApi","budgetDataApi","accountApi","operationApi","allocationApi","categoryApi","masterCategoryApi","dateTime","Date","year","getFullYear","getMonth","monthAsInt","getDayFromDate","getCurrentDate","formatDate","date","setMonth","setFullYear","getDate","dateString","dayAsInt","getMonthAsDate","setDate","getDateFromDay","currentYear","toISOString","split","budget","response","redirectToLoginPageIfUnauthorizedError","store","getCurrentDay","updateAccounts","masterCategory","initBudget","dispatch","updateMasterCategories","updateCategories","getAccounts","accounts","getCategories","categories","getMasterCategories","masterCategories","getDefaultBudget","category","archived","goToLastMonth","toBeBudgetedClass","$d","budgetMonth","isThisYear","toBeBudgeted","getEurosAmount","goToNextMonth","totalBudgetData","allocated","spent","available","updateAllocation","categoryDataList","createMasterCategory","archiveVisible","focusOn","loosesFocus","createCategory","putFocusOn","masterCategoryData","updateAllocationOnChange","$event","centsAmount","eurosAmount","Math","round","unarchiveCategory","$emit","archiveCategory","props","required","emits","methods","unarchiveMasterCategory","archiveMasterCategory","renameMasterCategory","components","CategoryForm","MasterCategoryForm","Boolean","default","computed","getCategoriesByMasterCategory","getCentsAmount","MasterCategoryCmpt","Number","created","getBudgetData","watch","account","formerAllocations","$props","amountInBudget","monthIsThisYear","getBudgetDataForMonth","initFormerAllocation","getBudgetAmount","newAllocation","getNextMonth","getLastMonth","totalOnAccounts","goToAccountPage","accountCreationFormIsDisplayed","changeAccountCreationFormDisplay","for","placeholder","createAccount","AccountCreationForm","total","path","RouterPages","query","$data","home","a","isAxiosError","JSON","parse","redirectToLoginPageIfNotLogged","beforeCreate","initStore","BudgetCmpt","AccountsWidget","Loader","getCurrentMonth","alt","login","errorMsg","goToSignUp","logged","responseData","unlockingDate","minutes","lockingDuration","getTime","signup","__scopeId","passwordConfirm","goToLogin","testForm","regex","passwordCheckSecurity","match","regExp","validPassword","test","editingTitle","currentName","updateName","cancelEditing","displayTitleEditing","getAccountOperation","operations","operation","editing","getDayAsDate","getCategoryById","setAsEditing","disabled","data-on","data-off","style","incomeCategoryId","transfertCategoryId","label","getArchivedCategories","incoming","getDateStringFromDay","getCurrentDateString","abs","String","signedCentsAmount","getDayFromDateString","getCategoriesByArchivedStatus","OperationForm","getOperations","operationToEditableOperation","editableOperations","forEach","routes","component","Home","Login","Signup","AccountPage","route","about","router","history","status","doesSessionExist","mutations","updateLogged","resetStore","updateOnBudgetChange","sort","b","toLowerCase","updateStoreLoaded","actions","context","commit","messages","fr","en","i18n","locale","fallbackLocale","datetimeFormats","commitHash","App","use","mount"],"mappings":"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","file":"js/app.de8c38bf.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({\"about\":\"about\"}[chunkId]||chunkId) + \".\" + {\"about\":\"b6ed1c4d\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=207f7db8&lang=less\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Login.vue?vue&type=style&index=0&id=db8d7caa&scoped=true&lang=less\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Signup.vue?vue&type=style&index=0&id=5cd6e35c&scoped=true&lang=less\"","module.exports = __webpack_public_path__ + \"img/logo_round.87e0efea.png\";","<template>\n<div class=\"main container-fluid\">\n  <div class=\"main-row row\">\n  <router-view/>\n  </div>\n</div>\n</template>\n<style lang=\"less\">\n.main {\n  height: 100vh;\n};\n.main-row {\n  height: 100%;\n};\n@import \"~bootstrap/dist/css/bootstrap.min.css\";\n@import \"style/all.less\";\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=207f7db8\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=207f7db8&lang=less\"\nscript.render = render\n\nexport default script","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","<template >\n  <div :class=\"this.$store.state.css\">\n    <div class=\"home row\">\n      <div v-if=\"this.$store.state.storeLoaded\" class=\"row\">\n        <div class=\"col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-xl-5 offset-xl-2\">\n          <BudgetCmpt :month=\"this.currentMonth\" />\n        </div>\n        <div class=\"col-8 offset-2 col-sm-6 offset-sm-3 col-md-4 offset-md-4 col-xl-2 offset-xl-1\">\n          <AccountsWidget/>\n          <ul id=\"actionsList\" class=\"list-group list-group-horizontal d-flex justify-content-center\">\n          <li><button class=\"btn fas fa-chart-line disabled\" :title=\"$t('GRAPH_AND_REPORT')\"/></li>\n          <li><button class=\"btn fas fa-cog disabled\" :title=\"$t('PREFERENCES')\"/></li>\n          <li><button v-on:click=\"logout\" class=\"btn fas fa-sign-out-alt\" :title=\"$t('LOGOUT')\"/></li>\n        </ul>\n        </div>\n      </div>\n    <div v-else>\n        <Loader class=\"loader\"/>\n    </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport BudgetCmpt from '@/components/BudgetCmpt.vue' // @ is an alias to /src\nimport AccountsWidget from '@/components/AccountsWidget.vue'\nimport PersonService from '@/services/PersonService'\nimport Time from '@/utils/Time'\nimport Loader from '@/components/utils/Loader.vue'\n\nexport default defineComponent({\n  name: 'Home',\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n  },\n  components: {\n    BudgetCmpt,\n    AccountsWidget,\n    Loader\n  },\n  data () {\n    return {\n      currentMonth: Time.getCurrentMonth()\n    }\n  },\n  methods: {\n    logout () {\n      PersonService.deleteSession(this.$store)\n    }\n  }\n})\n</script>\n","enum Properties {\n    server = 'https://api.agatha-budget.fr/',\n    refreshUrl = 'https://api.agatha-budget.fr/session/refresh',\n    commitHash = 'bb37f84cdd5c993358d1fb5da2ce82cffdff1e7f'\n}\n\nexport default Properties\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport SuperTokensRequest from 'supertokens-website/axios';\nimport Properties from '@/../properties';\n\n\nSuperTokensRequest.makeSuper(globalAxios);\nexport const superTokenAxios = globalAxios;\n\nSuperTokensRequest.init({\n    refreshTokenUrl: Properties.refreshUrl\n});\n\nexport const BASE_PATH = Properties.server.replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = superTokenAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Tresorier\n * Trésorier api front to back\n *\n * The version of the OpenAPI document: 2.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, superTokenAxios as globalAxios} from './base';\n\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'amount': number;\n}\n/**\n * \n * @export\n * @interface Allocation\n */\nexport interface Allocation {\n    /**\n     * \n     * @type {number}\n     * @memberof Allocation\n     */\n    'month': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Allocation\n     */\n    'categoryId': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Allocation\n     */\n    'amount': number;\n}\n/**\n * \n * @export\n * @interface Budget\n */\nexport interface Budget {\n    /**\n     * \n     * @type {string}\n     * @memberof Budget\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Budget\n     */\n    'name': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Budget\n     */\n    'isDefault'?: boolean;\n}\n/**\n * \n * @export\n * @interface Category\n */\nexport interface Category {\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    'masterCategoryId': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Category\n     */\n    'archived': boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Category\n     */\n    'deleted': boolean;\n}\n/**\n * \n * @export\n * @interface CategoryData\n */\nexport interface CategoryData {\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    'allocated': number;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    'spent': number;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryData\n     */\n    'available': number;\n}\n/**\n * \n * @export\n * @interface MasterCategory\n */\nexport interface MasterCategory {\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof MasterCategory\n     */\n    'budgetId': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof MasterCategory\n     */\n    'deleted': boolean;\n}\n/**\n * \n * @export\n * @interface Operation\n */\nexport interface Operation {\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Operation\n     */\n    'day': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    'accountId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    'categoryId': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Operation\n     */\n    'amount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Operation\n     */\n    'memo': string;\n}\n\n/**\n * AccountApi - axios parameter creator\n * @export\n */\nexport const AccountApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAccount: async (budgetId: string, name: string, amount: number, day: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('addAccount', 'budgetId', budgetId)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addAccount', 'name', name)\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('addAccount', 'amount', amount)\n            // verify required parameter 'day' is not null or undefined\n            assertParamExists('addAccount', 'day', day)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n            if (day !== undefined) {\n                localVarQueryParameter['day'] = day;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAccount', 'accountId', accountId)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAccountsByBudget: async (budgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findAccountsByBudget', 'budgetId', budgetId)\n            const localVarPath = `/account/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} accountId \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount: async (accountId: string, newName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('updateAccount', 'accountId', accountId)\n            // verify required parameter 'newName' is not null or undefined\n            assertParamExists('updateAccount', 'newName', newName)\n            const localVarPath = `/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AccountApi - functional programming interface\n * @export\n */\nexport const AccountApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addAccount(budgetId: string, name: string, amount: number, day: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount(budgetId, name, amount, day, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findAccountsByBudget(budgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findAccountsByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} accountId \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAccount(accountId: string, newName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(accountId, newName, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AccountApi - factory interface\n * @export\n */\nexport const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AccountApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new account\n         * @param {string} budgetId \n         * @param {string} name \n         * @param {number} amount \n         * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAccount(budgetId: string, name: string, amount: number, day: number, options?: any): AxiosPromise<string> {\n            return localVarFp.addAccount(budgetId, name, amount, day, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete account\n         * @param {string} accountId id of the account you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAccount(accountId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteAccount(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds accounts by budget\n         * @param {string} budgetId id of the budget whose accounts you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAccountsByBudget(budgetId: string, options?: any): AxiosPromise<Array<Account>> {\n            return localVarFp.findAccountsByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Rename an account\n         * @param {string} accountId \n         * @param {string} newName \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount(accountId: string, newName: string, options?: any): AxiosPromise<string> {\n            return localVarFp.updateAccount(accountId, newName, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AccountApi - object-oriented interface\n * @export\n * @class AccountApi\n * @extends {BaseAPI}\n */\nexport class AccountApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new account\n     * @param {string} budgetId \n     * @param {string} name \n     * @param {number} amount \n     * @param {number} day day as seen by user in his/her timezone, format : 2 january 2021 &#x3D;&gt; 20210102\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public addAccount(budgetId: string, name: string, amount: number, day: number, options?: AxiosRequestConfig) {\n        return AccountApiFp(this.configuration).addAccount(budgetId, name, amount, day, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete account\n     * @param {string} accountId id of the account you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public deleteAccount(accountId: string, options?: AxiosRequestConfig) {\n        return AccountApiFp(this.configuration).deleteAccount(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds accounts by budget\n     * @param {string} budgetId id of the budget whose accounts you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public findAccountsByBudget(budgetId: string, options?: AxiosRequestConfig) {\n        return AccountApiFp(this.configuration).findAccountsByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Rename an account\n     * @param {string} accountId \n     * @param {string} newName \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public updateAccount(accountId: string, newName: string, options?: AxiosRequestConfig) {\n        return AccountApiFp(this.configuration).updateAccount(accountId, newName, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AllocationApi - axios parameter creator\n * @export\n */\nexport const AllocationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAllocation: async (month: number, categoryId: string, amount: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'month' is not null or undefined\n            assertParamExists('addAllocation', 'month', month)\n            // verify required parameter 'categoryId' is not null or undefined\n            assertParamExists('addAllocation', 'categoryId', categoryId)\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('addAllocation', 'amount', amount)\n            const localVarPath = `/allocation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (month !== undefined) {\n                localVarQueryParameter['month'] = month;\n            }\n\n            if (categoryId !== undefined) {\n                localVarQueryParameter['category_id'] = categoryId;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AllocationApi - functional programming interface\n * @export\n */\nexport const AllocationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AllocationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addAllocation(month: number, categoryId: string, amount: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Allocation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addAllocation(month, categoryId, amount, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AllocationApi - factory interface\n * @export\n */\nexport const AllocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AllocationApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new allocation or update an existing one\n         * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n         * @param {string} categoryId \n         * @param {number} amount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addAllocation(month: number, categoryId: string, amount: number, options?: any): AxiosPromise<Allocation> {\n            return localVarFp.addAllocation(month, categoryId, amount, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AllocationApi - object-oriented interface\n * @export\n * @class AllocationApi\n * @extends {BaseAPI}\n */\nexport class AllocationApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new allocation or update an existing one\n     * @param {number} month day of the operation (march 2010 &#x3D;&gt; 201003)\n     * @param {string} categoryId \n     * @param {number} amount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AllocationApi\n     */\n    public addAllocation(month: number, categoryId: string, amount: number, options?: AxiosRequestConfig) {\n        return AllocationApiFp(this.configuration).addAllocation(month, categoryId, amount, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * BudgetApi - axios parameter creator\n * @export\n */\nexport const BudgetApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addBudget: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addBudget', 'name', name)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication accessToken required\n\n            // authentication refreshTokenId required\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBudget: async (budgetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('deleteBudget', 'budgetId', budgetId)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetsByUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/budget/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBudget: async (budgetId: string, newName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('updateBudget', 'budgetId', budgetId)\n            // verify required parameter 'newName' is not null or undefined\n            assertParamExists('updateBudget', 'newName', newName)\n            const localVarPath = `/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BudgetApi - functional programming interface\n * @export\n */\nexport const BudgetApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BudgetApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addBudget(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addBudget(name, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBudget(budgetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findBudgetsByUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Budget>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findBudgetsByUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBudget(budgetId: string, newName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBudget(budgetId, newName, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * BudgetApi - factory interface\n * @export\n */\nexport const BudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BudgetApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new budget\n         * @param {string} name name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addBudget(name: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addBudget(name, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete budget\n         * @param {number} budgetId id of the budget you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBudget(budgetId: number, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds budgets by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetsByUser(options?: any): AxiosPromise<Array<Budget>> {\n            return localVarFp.findBudgetsByUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a budget\n         * @param {string} budgetId id of the updated budget\n         * @param {string} newName new name of the new budget\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBudget(budgetId: string, newName: string, options?: any): AxiosPromise<string> {\n            return localVarFp.updateBudget(budgetId, newName, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BudgetApi - object-oriented interface\n * @export\n * @class BudgetApi\n * @extends {BaseAPI}\n */\nexport class BudgetApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new budget\n     * @param {string} name name of the new budget\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public addBudget(name: string, options?: AxiosRequestConfig) {\n        return BudgetApiFp(this.configuration).addBudget(name, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete budget\n     * @param {number} budgetId id of the budget you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public deleteBudget(budgetId: number, options?: AxiosRequestConfig) {\n        return BudgetApiFp(this.configuration).deleteBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds budgets by user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public findBudgetsByUser(options?: AxiosRequestConfig) {\n        return BudgetApiFp(this.configuration).findBudgetsByUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a budget\n     * @param {string} budgetId id of the updated budget\n     * @param {string} newName new name of the new budget\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetApi\n     */\n    public updateBudget(budgetId: string, newName: string, options?: AxiosRequestConfig) {\n        return BudgetApiFp(this.configuration).updateBudget(budgetId, newName, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * BudgetDataApi - axios parameter creator\n * @export\n */\nexport const BudgetDataApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetData: async (budgetId: string, startMonth?: number, endMonth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findBudgetData', 'budgetId', budgetId)\n            const localVarPath = `/budget/data`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (startMonth !== undefined) {\n                localVarQueryParameter['start_month'] = startMonth;\n            }\n\n            if (endMonth !== undefined) {\n                localVarQueryParameter['end_month'] = endMonth;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTotalBudgetAmount: async (budgetId: string, month?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('findTotalBudgetAmount', 'budgetId', budgetId)\n            const localVarPath = `/budget/amount`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n            if (month !== undefined) {\n                localVarQueryParameter['month'] = month;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BudgetDataApi - functional programming interface\n * @export\n */\nexport const BudgetDataApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BudgetDataApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: { [key: string]: CategoryData; }; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findBudgetData(budgetId, startMonth, endMonth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findTotalBudgetAmount(budgetId: string, month?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findTotalBudgetAmount(budgetId, month, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * BudgetDataApi - factory interface\n * @export\n */\nexport const BudgetDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BudgetDataApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Find data by budget\n         * @param {string} budgetId \n         * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n         * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: any): AxiosPromise<{ [key: string]: { [key: string]: CategoryData; }; }> {\n            return localVarFp.findBudgetData(budgetId, startMonth, endMonth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find amount on accounts by budget\n         * @param {string} budgetId \n         * @param {number} [month] example : mars 2020 &#x3D; 202003\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTotalBudgetAmount(budgetId: string, month?: number, options?: any): AxiosPromise<number> {\n            return localVarFp.findTotalBudgetAmount(budgetId, month, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BudgetDataApi - object-oriented interface\n * @export\n * @class BudgetDataApi\n * @extends {BaseAPI}\n */\nexport class BudgetDataApi extends BaseAPI {\n    /**\n     * \n     * @summary Find data by budget\n     * @param {string} budgetId \n     * @param {number} [startMonth] example : mars 2020 &#x3D; 202003\n     * @param {number} [endMonth] example : mars 2020 &#x3D; 202003\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetDataApi\n     */\n    public findBudgetData(budgetId: string, startMonth?: number, endMonth?: number, options?: AxiosRequestConfig) {\n        return BudgetDataApiFp(this.configuration).findBudgetData(budgetId, startMonth, endMonth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find amount on accounts by budget\n     * @param {string} budgetId \n     * @param {number} [month] example : mars 2020 &#x3D; 202003\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BudgetDataApi\n     */\n    public findTotalBudgetAmount(budgetId: string, month?: number, options?: AxiosRequestConfig) {\n        return BudgetDataApiFp(this.configuration).findTotalBudgetAmount(budgetId, month, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * CategoryApi - axios parameter creator\n * @export\n */\nexport const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCategory: async (name: string, masterCategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addCategory', 'name', name)\n            // verify required parameter 'masterCategoryId' is not null or undefined\n            assertParamExists('addCategory', 'masterCategoryId', masterCategoryId)\n            const localVarPath = `/category`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (masterCategoryId !== undefined) {\n                localVarQueryParameter['master_category_id'] = masterCategoryId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCategoriesByBudget: async (budgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('getCategoriesByBudget', 'budgetId', budgetId)\n            const localVarPath = `/category/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCategory: async (id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateCategory', 'id', id)\n            const localVarPath = `/category`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n            if (newMasterCategoryId !== undefined) {\n                localVarQueryParameter['new_master_category_id'] = newMasterCategoryId;\n            }\n\n            if (newArchived !== undefined) {\n                localVarQueryParameter['new_archived'] = newArchived;\n            }\n\n            if (newDeleted !== undefined) {\n                localVarQueryParameter['new_deleted'] = newDeleted;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * CategoryApi - functional programming interface\n * @export\n */\nexport const CategoryApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addCategory(name: string, masterCategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(name, masterCategoryId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCategoriesByBudget(budgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * CategoryApi - factory interface\n * @export\n */\nexport const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = CategoryApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new category\n         * @param {string} name \n         * @param {string} masterCategoryId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCategory(name: string, masterCategoryId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addCategory(name, masterCategoryId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCategoriesByBudget(budgetId: string, options?: any): AxiosPromise<Array<Category>> {\n            return localVarFp.getCategoriesByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {number} [newMasterCategoryId] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: any): AxiosPromise<string> {\n            return localVarFp.updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * CategoryApi - object-oriented interface\n * @export\n * @class CategoryApi\n * @extends {BaseAPI}\n */\nexport class CategoryApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new category\n     * @param {string} name \n     * @param {string} masterCategoryId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public addCategory(name: string, masterCategoryId: string, options?: AxiosRequestConfig) {\n        return CategoryApiFp(this.configuration).addCategory(name, masterCategoryId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get categories by budget\n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public getCategoriesByBudget(budgetId: string, options?: AxiosRequestConfig) {\n        return CategoryApiFp(this.configuration).getCategoriesByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a category\n     * @param {string} id \n     * @param {string} [newName] \n     * @param {number} [newMasterCategoryId] \n     * @param {boolean} [newArchived] \n     * @param {boolean} [newDeleted] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CategoryApi\n     */\n    public updateCategory(id: string, newName?: string, newMasterCategoryId?: number, newArchived?: boolean, newDeleted?: boolean, options?: AxiosRequestConfig) {\n        return CategoryApiFp(this.configuration).updateCategory(id, newName, newMasterCategoryId, newArchived, newDeleted, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * MasterCategoryApi - axios parameter creator\n * @export\n */\nexport const MasterCategoryApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMasterCategory: async (name: string, budgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('addMasterCategory', 'name', name)\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('addMasterCategory', 'budgetId', budgetId)\n            const localVarPath = `/mcategory`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMasterCategoriesByBudget: async (budgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'budgetId' is not null or undefined\n            assertParamExists('getMasterCategoriesByBudget', 'budgetId', budgetId)\n            const localVarPath = `/mcategory/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (budgetId !== undefined) {\n                localVarQueryParameter['budget_id'] = budgetId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMasterCategory: async (id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMasterCategory', 'id', id)\n            const localVarPath = `/mcategory`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['new_name'] = newName;\n            }\n\n            if (newArchived !== undefined) {\n                localVarQueryParameter['new_archived'] = newArchived;\n            }\n\n            if (newDeleted !== undefined) {\n                localVarQueryParameter['new_deleted'] = newDeleted;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MasterCategoryApi - functional programming interface\n * @export\n */\nexport const MasterCategoryApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = MasterCategoryApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMasterCategory(name: string, budgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMasterCategory(name, budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMasterCategoriesByBudget(budgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MasterCategory>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMasterCategoriesByBudget(budgetId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMasterCategory(id, newName, newArchived, newDeleted, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * MasterCategoryApi - factory interface\n * @export\n */\nexport const MasterCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = MasterCategoryApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new master category\n         * @param {string} name \n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMasterCategory(name: string, budgetId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.addMasterCategory(name, budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get master categories by budget\n         * @param {string} budgetId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMasterCategoriesByBudget(budgetId: string, options?: any): AxiosPromise<Array<MasterCategory>> {\n            return localVarFp.getMasterCategoriesByBudget(budgetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update master category\n         * @param {string} id \n         * @param {string} [newName] \n         * @param {boolean} [newArchived] \n         * @param {boolean} [newDeleted] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: any): AxiosPromise<string> {\n            return localVarFp.updateMasterCategory(id, newName, newArchived, newDeleted, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * MasterCategoryApi - object-oriented interface\n * @export\n * @class MasterCategoryApi\n * @extends {BaseAPI}\n */\nexport class MasterCategoryApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new master category\n     * @param {string} name \n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public addMasterCategory(name: string, budgetId: string, options?: AxiosRequestConfig) {\n        return MasterCategoryApiFp(this.configuration).addMasterCategory(name, budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get master categories by budget\n     * @param {string} budgetId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public getMasterCategoriesByBudget(budgetId: string, options?: AxiosRequestConfig) {\n        return MasterCategoryApiFp(this.configuration).getMasterCategoriesByBudget(budgetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update master category\n     * @param {string} id \n     * @param {string} [newName] \n     * @param {boolean} [newArchived] \n     * @param {boolean} [newDeleted] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MasterCategoryApi\n     */\n    public updateMasterCategory(id: string, newName?: string, newArchived?: boolean, newDeleted?: boolean, options?: AxiosRequestConfig) {\n        return MasterCategoryApiFp(this.configuration).updateMasterCategory(id, newName, newArchived, newDeleted, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * OperationApi - axios parameter creator\n * @export\n */\nexport const OperationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOperation: async (accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('addOperation', 'accountId', accountId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n            if (day !== undefined) {\n                localVarQueryParameter['day'] = day;\n            }\n\n            if (categoryId !== undefined) {\n                localVarQueryParameter['category_id'] = categoryId;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n            if (memo !== undefined) {\n                localVarQueryParameter['memo'] = memo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation: async (operationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'operationId' is not null or undefined\n            assertParamExists('deleteOperation', 'operationId', operationId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (operationId !== undefined) {\n                localVarQueryParameter['operation_id'] = operationId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('findOperationsByAccount', 'accountId', accountId)\n            const localVarPath = `/operation/account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByBudget: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('findOperationsByBudget', 'accountId', accountId)\n            const localVarPath = `/operation/budget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accountId !== undefined) {\n                localVarQueryParameter['account_id'] = accountId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOperation: async (operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'operationId' is not null or undefined\n            assertParamExists('updateOperation', 'operationId', operationId)\n            const localVarPath = `/operation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (operationId !== undefined) {\n                localVarQueryParameter['operation_id'] = operationId;\n            }\n\n            if (newAccountId !== undefined) {\n                localVarQueryParameter['new_account_id'] = newAccountId;\n            }\n\n            if (newDay !== undefined) {\n                localVarQueryParameter['new_day'] = newDay;\n            }\n\n            if (newCategoryId !== undefined) {\n                localVarQueryParameter['new_category_id'] = newCategoryId;\n            }\n\n            if (newAmount !== undefined) {\n                localVarQueryParameter['new_amount'] = newAmount;\n            }\n\n            if (newMemo !== undefined) {\n                localVarQueryParameter['new_memo'] = newMemo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OperationApi - functional programming interface\n * @export\n */\nexport const OperationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = OperationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addOperation(accountId, day, categoryId, amount, memo, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteOperation(operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOperation(operationId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findOperationsByAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Operation>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findOperationsByAccount(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findOperationsByBudget(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Operation>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findOperationsByBudget(accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * OperationApi - factory interface\n * @export\n */\nexport const OperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = OperationApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new operation\n         * @param {string} accountId \n         * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [categoryId] \n         * @param {number} [amount] \n         * @param {string} [memo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: any): AxiosPromise<Operation> {\n            return localVarFp.addOperation(accountId, day, categoryId, amount, memo, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete operation\n         * @param {string} operationId id of the operation you want to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation(operationId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.deleteOperation(operationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find operation by account\n         * @param {string} accountId id of the account whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByAccount(accountId: string, options?: any): AxiosPromise<Array<Operation>> {\n            return localVarFp.findOperationsByAccount(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Find operation by budget\n         * @param {string} accountId id of the budget whose operations you want to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findOperationsByBudget(accountId: string, options?: any): AxiosPromise<Array<Operation>> {\n            return localVarFp.findOperationsByBudget(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an operation\n         * @param {string} operationId \n         * @param {string} [newAccountId] \n         * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n         * @param {string} [newCategoryId] \n         * @param {number} [newAmount] \n         * @param {string} [newMemo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: any): AxiosPromise<Operation> {\n            return localVarFp.updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * OperationApi - object-oriented interface\n * @export\n * @class OperationApi\n * @extends {BaseAPI}\n */\nexport class OperationApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new operation\n     * @param {string} accountId \n     * @param {number} [day] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n     * @param {string} [categoryId] \n     * @param {number} [amount] \n     * @param {string} [memo] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public addOperation(accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string, options?: AxiosRequestConfig) {\n        return OperationApiFp(this.configuration).addOperation(accountId, day, categoryId, amount, memo, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete operation\n     * @param {string} operationId id of the operation you want to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public deleteOperation(operationId: string, options?: AxiosRequestConfig) {\n        return OperationApiFp(this.configuration).deleteOperation(operationId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find operation by account\n     * @param {string} accountId id of the account whose operations you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public findOperationsByAccount(accountId: string, options?: AxiosRequestConfig) {\n        return OperationApiFp(this.configuration).findOperationsByAccount(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Find operation by budget\n     * @param {string} accountId id of the budget whose operations you want to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public findOperationsByBudget(accountId: string, options?: AxiosRequestConfig) {\n        return OperationApiFp(this.configuration).findOperationsByBudget(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an operation\n     * @param {string} operationId \n     * @param {string} [newAccountId] \n     * @param {number} [newDay] day of the operation (2 march 2010 &#x3D;&gt; 20100302)\n     * @param {string} [newCategoryId] \n     * @param {number} [newAmount] \n     * @param {string} [newMemo] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationApi\n     */\n    public updateOperation(operationId: string, newAccountId?: string, newDay?: number, newCategoryId?: string, newAmount?: number, newMemo?: string, options?: AxiosRequestConfig) {\n        return OperationApiFp(this.configuration).updateOperation(operationId, newAccountId, newDay, newCategoryId, newAmount, newMemo, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPerson: async (name: string, password: string, email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('createPerson', 'name', name)\n            // verify required parameter 'password' is not null or undefined\n            assertParamExists('createPerson', 'password', password)\n            // verify required parameter 'email' is not null or undefined\n            assertParamExists('createPerson', 'email', email)\n            const localVarPath = `/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSession: async (email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'email' is not null or undefined\n            assertParamExists('createSession', 'email', email)\n            // verify required parameter 'password' is not null or undefined\n            assertParamExists('createSession', 'password', password)\n            const localVarPath = `/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication accessToken required\n\n            // authentication refreshTokenId required\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPerson(name: string, password: string, email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(name, password, email, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSession(email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(email, password, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Create a person\n         * @param {string} name \n         * @param {string} password \n         * @param {string} email \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPerson(name: string, password: string, email: string, options?: any): AxiosPromise<string> {\n            return localVarFp.createPerson(name, password, email, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Login\n         * @param {string} email \n         * @param {string} password \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSession(email: string, password: string, options?: any): AxiosPromise<string> {\n            return localVarFp.createSession(email, password, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Logout\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSession(options?: any): AxiosPromise<string> {\n            return localVarFp.deleteSession(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Create a person\n     * @param {string} name \n     * @param {string} password \n     * @param {string} email \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public createPerson(name: string, password: string, email: string, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).createPerson(name, password, email, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Login\n     * @param {string} email \n     * @param {string} password \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public createSession(email: string, password: string, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).createSession(email, password, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public deleteSession(options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).deleteSession(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","import { PersonApi, AccountApi, BudgetApi, AllocationApi, BudgetDataApi, OperationApi, CategoryApi, MasterCategoryApi } from './openApi/api'\n\nexport const personApi = new PersonApi()\nexport const budgetApi = new BudgetApi()\nexport const budgetDataApi = new BudgetDataApi()\nexport const accountApi = new AccountApi()\nexport const operationApi = new OperationApi()\nexport const allocationApi = new AllocationApi()\nexport const categoryApi = new CategoryApi()\nexport const masterCategoryApi = new MasterCategoryApi()\n","export default class Time {\n  public static getCurrentMonth (): number {\n    const dateTime = new Date()\n    const year = dateTime.getFullYear()\n    const month = dateTime.getMonth() + 1 // by default from 0 to 11\n    return year * 100 + month\n  }\n\n  public static getNextMonth (monthAsInt: number): number {\n    let month = monthAsInt % 100\n    let year = (monthAsInt - month) / 100\n    if (month < 12) {\n      month += 1\n    } else {\n      year += 1\n      month = 1\n    }\n    return year * 100 + month\n  }\n\n  public static getLastMonth (monthAsInt: number): number {\n    let month = monthAsInt % 100\n    let year = (monthAsInt - month) / 100\n    if (month > 1) {\n      month -= 1\n    } else {\n      year -= 1\n      month = 12\n    }\n    return year * 100 + month\n  }\n\n  public static getCurrentDay (): number {\n    return this.getDayFromDate(this.getCurrentDate())\n  }\n\n  public static getCurrentDate (): Date {\n    return new Date()\n  }\n\n  public static getCurrentDateString (): string {\n    return this.formatDate(this.getCurrentDate())\n  }\n\n  public static getMonthAsDate (monthAsInt: number): Date {\n    const date = new Date()\n    const month = monthAsInt % 100\n    const year = (monthAsInt - month) / 100\n    date.setMonth(month - 1)\n    date.setFullYear(year)\n    return date\n  }\n\n  public static getDayFromDate (dateTime: Date): number {\n    const year = dateTime.getFullYear()\n    const month = dateTime.getMonth() + 1 // because the form count month from 0 - 11\n    const day = dateTime.getDate()\n    return year * 10000 + month * 100 + day\n  }\n\n  public static getDayFromDateString (dateString: string): number {\n    const date = new Date(dateString)\n    return this.getDayFromDate(date)\n  }\n\n  public static getDateFromDay (dayAsInt: number): Date {\n    const day = dayAsInt % 100\n    const monthAsInt = ((dayAsInt - day) / 100)\n    const date = this.getMonthAsDate(monthAsInt)\n    date.setDate(day)\n    return date\n  }\n\n  public static getDateStringFromDay (dayAsInt: number): string {\n    const date = this.getDateFromDay(dayAsInt)\n    return this.formatDate(date)\n  }\n\n  public static monthIsThisYear (monthAsInt: number): boolean {\n    const year = this.getMonthAsDate(monthAsInt).getFullYear()\n    const currentYear = new Date().getFullYear()\n    return year === currentYear\n  }\n\n  private static formatDate (date: Date): string {\n    return date.toISOString().split('T')[0]\n  }\n}\n","import { Budget, Account } from '@/model/model'\nimport { accountApi } from '@/services/api/apis'\nimport StoreHandler from '@/store/StoreHandler'\nimport Time from '@/utils/Time'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\nimport { Store } from 'vuex'\nimport { StoreState } from '@/store/index'\n\nexport default class AccountService {\n  public static async getAccounts (budget: Budget): Promise<Account[]> {\n    const data: Account[] = []\n    if (budget.id) {\n      const response = await accountApi.findAccountsByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n\n  public static async createAccount (store: Store<StoreState>, budget: Budget, name: string, amount: number) {\n    await accountApi.addAccount(budget.id, name, amount, Time.getCurrentDay()).then(\n      (response) => {\n        redirectToLoginPageIfUnauthorizedError(response)\n        StoreHandler.updateAccounts(store)\n      }\n    )\n  }\n\n  public static async updateAccount (store: Store<StoreState>, id: string, newName: string) {\n    await accountApi.updateAccount(id, newName).then(\n      (response) => {\n        redirectToLoginPageIfUnauthorizedError(response)\n        StoreHandler.updateAccounts(store)\n      }\n    )\n  }\n}\n","import { Budget } from '@/model/model'\nimport { budgetApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class BudgetService {\n  public static async getDefaultBudget (): Promise<Budget> {\n    try {\n      const response = await budgetApi.findBudgetsByUser()\n      return response.data[0]\n    } catch (exception) {\n      redirectToLoginPageIfUnauthorizedError(exception.response)\n      return exception.response\n    }\n  }\n}\n","import { Budget, Category, MasterCategory } from '@/model/model'\nimport { categoryApi } from '@/services/api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class CategoryService {\n  public static async createCategory (name: string, masterCategory: MasterCategory) {\n    const response = await categoryApi.addCategory(name, masterCategory.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async updateCategory (categoryId: string, newName: string) {\n    const response = await categoryApi.updateCategory(categoryId, newName)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async archiveCategory (categoryId: string) {\n    const response = await categoryApi.updateCategory(categoryId, undefined, undefined, true)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async unarchiveCategory (categoryId: string) {\n    const response = await categoryApi.updateCategory(categoryId, undefined, undefined, false)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async getCategories (budget: Budget): Promise<Category[]> {\n    const data: Category[] = []\n    if (budget.id) {\n      const response = await categoryApi.getCategoriesByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n}\n","import { Budget, MasterCategory } from '@/model/model'\nimport { masterCategoryApi } from '@/services/api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class MasterCategoryService {\n  public static async createMasterCategory (name: string, budget: Budget) {\n    await masterCategoryApi.addMasterCategory(name, budget.id)\n  }\n\n  public static async renameMasterCategory (masterCategoryId: string, newName: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, newName)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async archiveMasterCategory (masterCategoryId: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, undefined, true)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async unarchiveMasterCategory (masterCategoryId: string) {\n    const response = await masterCategoryApi.updateMasterCategory(masterCategoryId, undefined, false)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n\n  public static async getMasterCategories (budget: Budget): Promise<MasterCategory[]> {\n    const data: MasterCategory[] = []\n    if (budget.id) {\n      const response = await masterCategoryApi.getMasterCategoriesByBudget(budget.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      return response.data\n    }\n    return data\n  }\n}\n","import { Budget, Account, Category, MasterCategory } from '@/model/model'\nimport AccountService from '@/services/AccountService'\nimport BudgetService from '@/services/BudgetService'\nimport CategoryService from '@/services/CategoryService'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\n\nexport default class StoreHandler {\n  public static async initStore (store: Store<StoreState>) {\n    await this.initBudget(store)\n  }\n\n  public static resetStore (store: Store<StoreState>) {\n    store.dispatch('updateBudget', null)\n    store.dispatch('updateAccounts', [])\n    store.dispatch('updateCategories', [])\n    store.dispatch('updateMasterCategories', [])\n    store.dispatch('updateStoreLoaded', false)\n  }\n\n  public static async updateOnBudgetChange (store: Store<StoreState>) {\n    this.updateAccounts(store)\n    this.updateMasterCategories(store)\n    this.updateCategories(store)\n    store.dispatch('updateStoreLoaded', true)\n  }\n\n  public static async updateAccounts (store: Store<StoreState>) {\n    if (store.state.budget) {\n      AccountService.getAccounts(store.state.budget).then(\n        (accounts: Account[]) => {\n          store.dispatch('updateAccounts', accounts)\n        }\n      )\n    }\n  }\n\n  public static async updateCategories (store: Store<StoreState>) {\n    if (store.state.budget) {\n      CategoryService.getCategories(store.state.budget).then(\n        (categories: Category[]) => {\n          store.dispatch('updateCategories', categories)\n        }\n      )\n    }\n  }\n\n  public static async updateMasterCategories (store: Store<StoreState>) {\n    if (store.state.budget) {\n      MasterCategoryService.getMasterCategories(store.state.budget).then(\n        (masterCategories: MasterCategory[]) => {\n          store.dispatch('updateMasterCategories', masterCategories)\n        }\n      )\n    }\n  }\n\n  public static async initBudget (store: Store<StoreState>) {\n    BudgetService.getDefaultBudget().then(\n      (budget: Budget) => {\n        store.dispatch('updateBudget', budget)\n      }\n    )\n  }\n\n  public static getCategoryById (store: Store<StoreState>, categoryId: string): Category | null {\n    for (const category of store.state.categories) {\n      if (category.id === categoryId) {\n        return category\n      }\n    }\n    return null\n  }\n\n  public static getCategoriesByMasterCategory (store: Store<StoreState>, masterCategory: MasterCategory, archived: boolean): Category[] {\n    const categories: Category[] = []\n    for (const category of store.state.categories) {\n      if (category.masterCategoryId === masterCategory.id && category.archived === archived) {\n        categories.push(category)\n      }\n    }\n    return categories\n  }\n\n  public static getCategoriesByArchivedStatus (store: Store<StoreState>, archived: boolean): Category[] {\n    const categories: Category[] = []\n    for (const category of store.state.categories) {\n      if (category.archived === archived) {\n        categories.push(category)\n      }\n    }\n    return categories\n  }\n}\n","<template>\n  <div>\n    <div id=\"budgetTables\">\n      <div class=\"row date\">\n        <div class=\"col-2 d-flex justify-content-center\" ><button type=\"button\" class=\"btn fas fa-chevron-left\" v-on:click=\"this.goToLastMonth()\"/></div>\n        <div class=\"col-8 date-label\" :class=\"this.toBeBudgetedClass\">\n          <span class=\"month\">{{ $d(this.getMonthAsDate(budgetMonth), 'monthString') }} <span v-if=\"!this.isThisYear\"> {{ $d(this.getMonthAsDate(budgetMonth), 'year') }}</span></span>\n          <span class=\"toBeBudgeted\" v-if=\"this.toBeBudgeted > 0\"> : {{ getEurosAmount(this.toBeBudgeted) }} € {{$t('TO_BE_BUDGETED')}}</span>\n          <span class=\"toBePulledOut\" v-else-if=\"this.toBeBudgeted < 0\"> : {{ getEurosAmount(-1*this.toBeBudgeted) }} € {{$t('TO_BE_PULLED_OUT')}}</span>\n        </div>\n        <div class=\"col-2 d-flex justify-content-center\" ><button type=\"button\" class=\"btn fas fa-chevron-right\" v-on:click=\"this.goToNextMonth()\"/></div>\n      </div>\n      <table id=\"totalTable\" class=\"table\">\n          <tr>\n            <th class=\"col-6 name\"></th>\n            <th class=\"col-2 allocated\"><div>{{ $t(\"ALLOCATED\") }}</div></th>\n            <th class=\"col-2 spent\"><div>{{ $t(\"SPENT\") }}</div></th>\n            <th class=\"col-2 available\"><div>{{ $t(\"AVAILABLE\") }}</div></th>\n          </tr>\n          <tbody>\n          <tr>\n            <td class=\"name\"><div>{{ $t(\"TOTAL\") }}</div></td>\n            <td class=\"allocated\">{{ getEurosAmount(this.totalBudgetData.allocated) }}</td>\n            <td class=\"spent\">{{ getEurosAmount(this.totalBudgetData.spent) }}</td>\n            <td class=\"available\">{{ getEurosAmount(this.totalBudgetData.available) }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"scrollable\">\n        <table class=\"budgetTable table\"\n        v-for=\"masterCategory of this.$store.state.masterCategories\"\n        :key=\"masterCategory\"\n        >\n            <master-category-cmpt\n              @update-allocation=\"updateAllocation\"\n              :masterCategory=\"masterCategory\"\n              :categoryDataList=\"this.categoryDataList\"\n            />\n        </table>\n        <div class=\"budget-tools\">\n          <div><span type=\"button\" v-on:click=\"this.createMasterCategory()\"> > {{ $t(\"ADD_MASTER_CATEGORY\") }}</span></div>\n          <div><span class=\"tooltiped\" > > {{ $t(\"ADD_CATEGORY\") }}<span class=\"tooltiptext\">{{ $t(\"CLICK_ON_THE_MASTER_CATEGORY\") }}</span></span></div>\n          <div v-on:click=\"this.archiveVisible = !this.archiveVisible\">\n            <span v-if=\"this.archiveVisible\" type=\"button\" > > {{ $t(\"HIDE_ARCHIVE\") }}</span>\n            <span v-else type=\"button\"> > {{ $t(\"SHOW_ARCHIVE\") }}</span>\n          </div>\n        </div>\n        <div v-if=\"this.archiveVisible\" id=\"archive_section\" >\n          <div class=\"title\">{{ $t(\"ARCHIVE\") }}</div>\n          <table class=\"budgetArchiveTable table\"\n          v-for=\"masterCategory in this.$store.state.masterCategories\"\n          :key=\"masterCategory\"\n          >\n              <master-category-cmpt\n                @update-allocation=\"updateAllocation\"\n                :masterCategory=\"masterCategory\"\n                :categoryDataList=\"this.categoryDataList\"\n                :archived=\"true\"\n              />\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport BudgetDataService from '@/services/BudgetDataService'\nimport AllocationService from '@/services/AllocationService'\nimport { Account, Budget, CategoryData, CategoryDataList } from '@/model/model'\nimport MasterCategoryCmpt from './MasterCategoryCmpt.vue'\nimport Time from '@/utils/Time'\nimport Utils from '@/utils/Utils'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport StoreHandler from '@/store/StoreHandler'\n\ninterface BudgetCmptData {\n    categoryDataList: CategoryDataList;\n    formerAllocations: {\n        [categoryId: string]: number;\n    };\n    budgetMonth: number;\n    amountInBudget: number;\n    archiveVisible: boolean;\n}\n\nexport default defineComponent({\n  name: 'BudgetCmpt',\n  components: {\n    MasterCategoryCmpt\n  },\n  props: {\n    month: {\n      type: Number,\n      required: true\n    }\n  },\n  created: async function () {\n    this.getBudgetData()\n  },\n  watch: {\n    account: async function () {\n      this.getBudgetData()\n    },\n    budget: async function () {\n      this.getBudgetData()\n    },\n    budgetMonth: async function () {\n      this.getBudgetData()\n    }\n  },\n  data (): BudgetCmptData {\n    return {\n      categoryDataList: {},\n      /* use former allocation to compute the new \"available\" value\n        newAvailable = available + newAllocation - formerAllocation\n        without asking the back-end to compute */\n      formerAllocations: {},\n      budgetMonth: this.$props.month,\n      amountInBudget: 0,\n      archiveVisible: false\n    }\n  },\n  computed: {\n    budget (): Budget | null {\n      return this.$store.state.budget\n    },\n    accounts (): Account[] | null {\n      return this.$store.state.accounts\n    },\n    totalBudgetData () {\n      const totalBudgetData = new CategoryData()\n      for (const categoryId in this.categoryDataList) {\n        totalBudgetData.allocated += this.categoryDataList[categoryId].allocated\n        totalBudgetData.spent += this.categoryDataList[categoryId].spent\n        totalBudgetData.available += this.categoryDataList[categoryId].available\n      }\n      return totalBudgetData\n    },\n    isThisYear (): boolean {\n      return Time.monthIsThisYear(this.budgetMonth)\n    },\n    toBeBudgeted (): number {\n      let toBeBudgeted = this.amountInBudget\n      for (const categoryId in this.categoryDataList) {\n        toBeBudgeted -= this.categoryDataList[categoryId].available\n      }\n      return toBeBudgeted\n    },\n    toBeBudgetedClass (): string {\n      if (this.toBeBudgeted > 0) {\n        return 'positive'\n      } else if (this.toBeBudgeted < 0) {\n        return 'negative'\n      } else {\n        return 'null'\n      }\n    }\n  },\n  methods: {\n    async getBudgetData () {\n      if (this.budget) {\n        BudgetDataService.getBudgetDataForMonth(this.budget, this.budgetMonth).then(\n          (categoryDataList) => {\n            this.categoryDataList = categoryDataList\n            this.initFormerAllocation()\n          }\n        )\n        BudgetDataService.getBudgetAmount(this.budget, this.budgetMonth).then(\n          (amount) => {\n            this.amountInBudget = amount\n          }\n        )\n      }\n    },\n    initFormerAllocation () {\n      let category\n      for (const categoryId in this.categoryDataList) {\n        category = this.categoryDataList[categoryId]\n        this.formerAllocations[categoryId] = category.allocated\n      }\n    },\n    updateAllocation (categoryId: string, newAllocation: number) {\n      if (!this.categoryDataList[categoryId]) {\n        this.categoryDataList[categoryId] = new CategoryData()\n      }\n      this.categoryDataList[categoryId].available +=\n        newAllocation - (this.formerAllocations[categoryId] || 0)\n      this.categoryDataList[categoryId].allocated = newAllocation\n      this.formerAllocations[categoryId] = newAllocation\n      AllocationService.updateAllocation(this.budgetMonth, categoryId, newAllocation)\n    },\n    getMonthAsDate (monthAsInt: number): Date {\n      return Time.getMonthAsDate(monthAsInt)\n    },\n    goToNextMonth () {\n      this.budgetMonth = Time.getNextMonth(this.budgetMonth)\n    },\n    goToLastMonth () {\n      this.budgetMonth = Time.getLastMonth(this.budgetMonth)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createMasterCategory () {\n      if (this.budget) {\n        MasterCategoryService.createMasterCategory('New Master Category', this.budget).then(\n          () => {\n            StoreHandler.updateMasterCategories(this.$store)\n            StoreHandler.updateCategories(this.$store)\n          }\n        )\n      }\n    }\n  }\n})\n</script>\n","import { Budget, BudgetData, CategoryDataList } from '@/model/model'\nimport { budgetApi, budgetDataApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class BudgetDataService {\n  public static async getDefaultBudget (): Promise<Budget> {\n    const response = await budgetApi.findBudgetsByUser()\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data[0]\n  }\n\n  public static async getBudgetData (budget: Budget): Promise<BudgetData> {\n    if (budget.id == null) { return [] }\n    const response = await budgetDataApi.findBudgetData(budget.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data\n  }\n\n  public static async getBudgetDataForMonth (budget: Budget, month: number): Promise<CategoryDataList> {\n    if (budget.id == null) { return {} }\n    const response = await budgetDataApi.findBudgetData(budget.id, month, month)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data[month]\n  }\n\n  public static async getBudgetAmount (budget: Budget, month: number): Promise<number> {\n    if (budget.id == null) { return 0 }\n    const response = await budgetDataApi.findTotalBudgetAmount(budget.id, month)\n    redirectToLoginPageIfUnauthorizedError(response)\n    return response.data\n  }\n}\n","import { allocationApi } from './api/apis'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class AllocationService {\n  public static async updateAllocation (month: number, categoryId: string, amount: number) {\n    const response = await allocationApi.addAllocation(month, categoryId, amount)\n    redirectToLoginPageIfUnauthorizedError(response)\n  }\n}\n","import { Operation, Account, Budget, Category, CategoryData as ICategoryData, MasterCategory } from '@/services/api/openApi/api'\n\ninterface BudgetData {\n    [monthComparable: number]: CategoryDataList;\n}\n\ninterface CategoryDataList {\n    [categoryId: string]: CategoryData;\n}\n\nclass CategoryData implements ICategoryData {\n    allocated = 0;\n    spent = 0;\n    available = 0;\n}\n\nconst incomeCategoryId = 'universal_income_category'\nconst transfertCategoryId = 'universal_transfert_category'\n\nexport {\n  Operation, CategoryData, BudgetData, Account, Budget, Category, MasterCategory, CategoryDataList, incomeCategoryId, transfertCategoryId\n}\n","<template>\n  <template v-if=\"this.categories.length > 0\">\n    <tr class=\"masterCategory\">\n      <th class=\"col-6 name\">\n        <div>\n          <MasterCategoryForm v-if=\"focusOn === masterCategory.id\" :masterCategory=\"masterCategory\" :archived=\"archived\" @looses-focus=\"loosesFocus\" @create-category=\"createCategory\"/>\n          <div v-else class=\"editable-master-category\">\n            <a v-on:click=\"this.putFocusOn(masterCategory.id)\">\n              {{ masterCategory?.name }}\n              <button class=\"btn fas fa-pen\"/>\n            </a>\n              <button class=\"btn fas fa-plus\" v-on:click=\"createCategory\"/>\n          </div>\n        </div>\n      </th>\n      <th class=\"col-2 allocated\">{{ getEurosAmount(masterCategoryData.allocated)}}</th>\n      <th class=\"col-2 spent\">{{ getEurosAmount(masterCategoryData.spent) }}</th>\n      <th class=\"col-2 available\">\n        <span :class=\"masterCategoryData.available < 0 ? 'negative' : 'positive'\">\n          {{ getEurosAmount(masterCategoryData.available) }}\n        </span>\n      </th>\n    </tr>\n    <tbody>\n    <tr class=\"category\" v-for=\"category of this.categories\" :key=\"category\">\n      <td class=\"name\">\n        <div>\n          <CategoryForm v-if=\"focusOn === category.id\" :category=\"category\" @looses-focus=\"loosesFocus\"/>\n          <a class=\"editable-category\" v-else v-on:click=\"this.putFocusOn(category.id)\">{{ category.name}} <button class=\"btn fas fa-pen\"/></a>\n        </div>\n      </td>\n      <td class=\"allocated\">\n        <span v-if=\"archived\">{{ this.categoryDataList[category.id]?.allocated ?? \"\" }}</span>\n        <input v-else type=\"number\" class=\"allocationInput\"\n        :value=\"this.getEurosAmount(this.categoryDataList[category.id]?.allocated ?? 0)\"\n        v-on:change=\"updateAllocationOnChange(category.id, $event.target.value)\"\n        >\n        </td>\n      <td class=\"spent\">\n          {{ getEurosAmount(this.categoryDataList[category.id]?.spent ?? \"\") }}\n      </td>\n      <td class=\"available\">\n        <span v-if=\"this.categoryDataList[category.id] && this.categoryDataList[category.id].available != 0\" :class=\"this.categoryDataList[category.id]?.available < 0 ? 'negative' : 'positive'\">\n          {{ getEurosAmount(this.categoryDataList[category.id]?.available) }}\n        </span>\n      </td>\n    </tr>\n    </tbody>\n  </template>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { MasterCategory, CategoryDataList, CategoryData, Category } from '@/model/model'\nimport Utils from '@/utils/Utils'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport CategoryForm from '@/components/forms/CategoryForm.vue'\nimport MasterCategoryForm from '@/components/forms/MasterCategoryForm.vue'\n\nexport default defineComponent({\n  name: 'MasterCategoryCmpt',\n  components: {\n    CategoryForm,\n    MasterCategoryForm\n  },\n  emits: ['updateAllocation'],\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    categoryDataList: {\n      type: Object as () => CategoryDataList,\n      required: true\n    },\n    archived: {\n      type: Boolean as () => boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      focusOn: ''\n    }\n  },\n  computed: {\n    categories (): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, this.masterCategory, this.archived)\n    },\n    masterCategoryData () {\n      const masterCategoryData = new CategoryData()\n      for (const category of this.categories) {\n        masterCategoryData.allocated += this.categoryDataList[category.id]?.allocated ?? 0\n        masterCategoryData.spent += this.categoryDataList[category.id]?.spent ?? 0\n        masterCategoryData.available += this.categoryDataList[category.id]?.available ?? 0\n      }\n      return masterCategoryData\n    }\n  },\n  methods: {\n    updateAllocationOnChange (categoryId: string, value: string) {\n      this.$emit('updateAllocation', categoryId, Utils.getCentsAmount(+value))\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createCategory () {\n      CategoryService.createCategory('New Category', this.masterCategory).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n        }\n      )\n    },\n    putFocusOn (categoryId: string) {\n      this.focusOn = categoryId\n    },\n    loosesFocus () {\n      this.focusOn = ''\n    }\n  }\n})\n</script>\n","export default class Utils {\n  public static getEurosAmount (centsAmount: number): number {\n    return (centsAmount / 100)\n  }\n\n  public static getCentsAmount (eurosAmount: number): number {\n    return Math.round(+eurosAmount * 100)\n  }\n}\n","<template>\n  <div v-if=\"this.category.archived\" id=\"operationForm\" class=\"operation\">\n    <span class=\"name\">{{ this.name }}</span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-level-up-alt\" v-on:click=\"unarchiveCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n    </span>\n  </div>\n  <div v-else id=\"operationForm\" class=\"operation\">\n    <span class=\"name\"><input id=\"newName\" class=\"form-control\" v-model=\"name\"></span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-check\" v-on:click=\"updateCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n      <button class=\"btn fas fa-archive\" v-on:click=\"archiveCategory\"/>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport { Category } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.category.name\n    }\n  },\n  props: {\n    category: {\n      type: Object as () => Category,\n      required: true\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateCategory () {\n      CategoryService.updateCategory(this.category.id, this.name).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveCategory () {\n      CategoryService.archiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveCategory () {\n      CategoryService.unarchiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport { Category } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.category.name\n    }\n  },\n  props: {\n    category: {\n      type: Object as () => Category,\n      required: true\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateCategory () {\n      CategoryService.updateCategory(this.category.id, this.name).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveCategory () {\n      CategoryService.archiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveCategory () {\n      CategoryService.unarchiveCategory(this.category.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n","import { render } from \"./CategoryForm.vue?vue&type=template&id=c05ac20e\"\nimport script from \"./CategoryForm.vue?vue&type=script&lang=ts\"\nexport * from \"./CategoryForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div v-if=\"this.archived\" id=\"operationForm\" class=\"operation\">\n    <span class=\"name\">{{ this.name }}</span>\n     <span class=\"validation\">\n      <button class=\"btn fas fa-level-up-alt\" v-on:click=\"unarchiveMasterCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n    </span>\n  </div>\n  <div v-else id=\"operationForm\" class=\"operation\">\n    <span class=\"name\"><input id=\"newName\" class=\"form-control\" v-model=\"name\"></span>\n    <span class=\"validation\">\n      <button class=\"btn fas fa-check\" v-on:click=\"updateMasterCategory\"/>\n      <button class=\"btn fas fa-times\" v-on:click=\"this.$emit('loosesFocus')\"/>\n      <button class=\"btn fas fa-archive\" v-on:click=\"archiveMasterCategory\"/>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { MasterCategory } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.masterCategory.name\n    }\n  },\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    archived: {\n      type: Object as () => boolean,\n      required: false\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateMasterCategory () {\n      MasterCategoryService.renameMasterCategory(this.masterCategory.id, this.name).then(\n        () => {\n          StoreHandler.updateMasterCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveMasterCategory () {\n      MasterCategoryService.archiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveMasterCategory () {\n      MasterCategoryService.unarchiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport { MasterCategory } from '@/model/model'\n\ninterface CategoryFormData {\n  name: string;\n}\n\nexport default defineComponent({\n  name: 'CategoryForm',\n  data (): CategoryFormData {\n    return {\n      name: this.masterCategory.name\n    }\n  },\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    archived: {\n      type: Object as () => boolean,\n      required: false\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    updateMasterCategory () {\n      MasterCategoryService.renameMasterCategory(this.masterCategory.id, this.name).then(\n        () => {\n          StoreHandler.updateMasterCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    archiveMasterCategory () {\n      MasterCategoryService.archiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    },\n    unarchiveMasterCategory () {\n      MasterCategoryService.unarchiveMasterCategory(this.masterCategory.id).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n          this.$emit('loosesFocus')\n        }\n      )\n    }\n  }\n})\n","import { render } from \"./MasterCategoryForm.vue?vue&type=template&id=640cc3a5\"\nimport script from \"./MasterCategoryForm.vue?vue&type=script&lang=ts\"\nexport * from \"./MasterCategoryForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport { MasterCategory, CategoryDataList, CategoryData, Category } from '@/model/model'\nimport Utils from '@/utils/Utils'\nimport CategoryService from '@/services/CategoryService'\nimport StoreHandler from '@/store/StoreHandler'\nimport CategoryForm from '@/components/forms/CategoryForm.vue'\nimport MasterCategoryForm from '@/components/forms/MasterCategoryForm.vue'\n\nexport default defineComponent({\n  name: 'MasterCategoryCmpt',\n  components: {\n    CategoryForm,\n    MasterCategoryForm\n  },\n  emits: ['updateAllocation'],\n  props: {\n    masterCategory: {\n      type: Object as () => MasterCategory,\n      required: true\n    },\n    categoryDataList: {\n      type: Object as () => CategoryDataList,\n      required: true\n    },\n    archived: {\n      type: Boolean as () => boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      focusOn: ''\n    }\n  },\n  computed: {\n    categories (): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, this.masterCategory, this.archived)\n    },\n    masterCategoryData () {\n      const masterCategoryData = new CategoryData()\n      for (const category of this.categories) {\n        masterCategoryData.allocated += this.categoryDataList[category.id]?.allocated ?? 0\n        masterCategoryData.spent += this.categoryDataList[category.id]?.spent ?? 0\n        masterCategoryData.available += this.categoryDataList[category.id]?.available ?? 0\n      }\n      return masterCategoryData\n    }\n  },\n  methods: {\n    updateAllocationOnChange (categoryId: string, value: string) {\n      this.$emit('updateAllocation', categoryId, Utils.getCentsAmount(+value))\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createCategory () {\n      CategoryService.createCategory('New Category', this.masterCategory).then(\n        () => {\n          StoreHandler.updateCategories(this.$store)\n        }\n      )\n    },\n    putFocusOn (categoryId: string) {\n      this.focusOn = categoryId\n    },\n    loosesFocus () {\n      this.focusOn = ''\n    }\n  }\n})\n","import { render } from \"./MasterCategoryCmpt.vue?vue&type=template&id=e77cf8bc\"\nimport script from \"./MasterCategoryCmpt.vue?vue&type=script&lang=ts\"\nexport * from \"./MasterCategoryCmpt.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport BudgetDataService from '@/services/BudgetDataService'\nimport AllocationService from '@/services/AllocationService'\nimport { Account, Budget, CategoryData, CategoryDataList } from '@/model/model'\nimport MasterCategoryCmpt from './MasterCategoryCmpt.vue'\nimport Time from '@/utils/Time'\nimport Utils from '@/utils/Utils'\nimport MasterCategoryService from '@/services/MasterCategoryService'\nimport StoreHandler from '@/store/StoreHandler'\n\ninterface BudgetCmptData {\n    categoryDataList: CategoryDataList;\n    formerAllocations: {\n        [categoryId: string]: number;\n    };\n    budgetMonth: number;\n    amountInBudget: number;\n    archiveVisible: boolean;\n}\n\nexport default defineComponent({\n  name: 'BudgetCmpt',\n  components: {\n    MasterCategoryCmpt\n  },\n  props: {\n    month: {\n      type: Number,\n      required: true\n    }\n  },\n  created: async function () {\n    this.getBudgetData()\n  },\n  watch: {\n    account: async function () {\n      this.getBudgetData()\n    },\n    budget: async function () {\n      this.getBudgetData()\n    },\n    budgetMonth: async function () {\n      this.getBudgetData()\n    }\n  },\n  data (): BudgetCmptData {\n    return {\n      categoryDataList: {},\n      /* use former allocation to compute the new \"available\" value\n        newAvailable = available + newAllocation - formerAllocation\n        without asking the back-end to compute */\n      formerAllocations: {},\n      budgetMonth: this.$props.month,\n      amountInBudget: 0,\n      archiveVisible: false\n    }\n  },\n  computed: {\n    budget (): Budget | null {\n      return this.$store.state.budget\n    },\n    accounts (): Account[] | null {\n      return this.$store.state.accounts\n    },\n    totalBudgetData () {\n      const totalBudgetData = new CategoryData()\n      for (const categoryId in this.categoryDataList) {\n        totalBudgetData.allocated += this.categoryDataList[categoryId].allocated\n        totalBudgetData.spent += this.categoryDataList[categoryId].spent\n        totalBudgetData.available += this.categoryDataList[categoryId].available\n      }\n      return totalBudgetData\n    },\n    isThisYear (): boolean {\n      return Time.monthIsThisYear(this.budgetMonth)\n    },\n    toBeBudgeted (): number {\n      let toBeBudgeted = this.amountInBudget\n      for (const categoryId in this.categoryDataList) {\n        toBeBudgeted -= this.categoryDataList[categoryId].available\n      }\n      return toBeBudgeted\n    },\n    toBeBudgetedClass (): string {\n      if (this.toBeBudgeted > 0) {\n        return 'positive'\n      } else if (this.toBeBudgeted < 0) {\n        return 'negative'\n      } else {\n        return 'null'\n      }\n    }\n  },\n  methods: {\n    async getBudgetData () {\n      if (this.budget) {\n        BudgetDataService.getBudgetDataForMonth(this.budget, this.budgetMonth).then(\n          (categoryDataList) => {\n            this.categoryDataList = categoryDataList\n            this.initFormerAllocation()\n          }\n        )\n        BudgetDataService.getBudgetAmount(this.budget, this.budgetMonth).then(\n          (amount) => {\n            this.amountInBudget = amount\n          }\n        )\n      }\n    },\n    initFormerAllocation () {\n      let category\n      for (const categoryId in this.categoryDataList) {\n        category = this.categoryDataList[categoryId]\n        this.formerAllocations[categoryId] = category.allocated\n      }\n    },\n    updateAllocation (categoryId: string, newAllocation: number) {\n      if (!this.categoryDataList[categoryId]) {\n        this.categoryDataList[categoryId] = new CategoryData()\n      }\n      this.categoryDataList[categoryId].available +=\n        newAllocation - (this.formerAllocations[categoryId] || 0)\n      this.categoryDataList[categoryId].allocated = newAllocation\n      this.formerAllocations[categoryId] = newAllocation\n      AllocationService.updateAllocation(this.budgetMonth, categoryId, newAllocation)\n    },\n    getMonthAsDate (monthAsInt: number): Date {\n      return Time.getMonthAsDate(monthAsInt)\n    },\n    goToNextMonth () {\n      this.budgetMonth = Time.getNextMonth(this.budgetMonth)\n    },\n    goToLastMonth () {\n      this.budgetMonth = Time.getLastMonth(this.budgetMonth)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    createMasterCategory () {\n      if (this.budget) {\n        MasterCategoryService.createMasterCategory('New Master Category', this.budget).then(\n          () => {\n            StoreHandler.updateMasterCategories(this.$store)\n            StoreHandler.updateCategories(this.$store)\n          }\n        )\n      }\n    }\n  }\n})\n","import { render } from \"./BudgetCmpt.vue?vue&type=template&id=26302b24\"\nimport script from \"./BudgetCmpt.vue?vue&type=script&lang=ts\"\nexport * from \"./BudgetCmpt.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div id=\"accountWidget\">\n    <div class=\"row\">\n    <h1>{{$t('MY_ACCOUNTS')}}</h1>\n    </div>\n    <span class=\"total\"> total : {{this.getEurosAmount(this.totalOnAccounts)}} €</span>\n    <ul>\n      <li class=\"account\" v-for=\"account of this.$store.state.accounts\" :key=\"account\">\n        <button class=\"btn\" v-on:click=\"goToAccountPage(account)\">{{ account.name }} : {{this.getEurosAmount(account.amount)}} €</button>\n      </li>\n      <li class=\"accountForm\">\n        <div v-if=\"!accountCreationFormIsDisplayed\">\n          <button class=\"btn displayFormBtn\" v-on:click=\"changeAccountCreationFormDisplay\" >\n            <span >{{$t('ADD_ACCOUNT')}}</span>\n          </button>\n        </div>\n        <div v-else class=\"closeBtnContainer\">\n          <button class=\"btn closeFormBtn\" v-on:click=\"changeAccountCreationFormDisplay\">\n            <span>x</span>\n          </button>\n        </div>\n        <div class=\"formContainer\" v-if=\"accountCreationFormIsDisplayed\">\n          <AccountCreationForm @update-account-list=\"getAccounts\" @close-form=\"changeAccountCreationFormDisplay\" />\n        </div>\n      </li>\n    </ul>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport AccountCreationForm from '@/components/forms/AccountCreationForm.vue'\nimport router, { RouterPages } from '@/router'\nimport { Account } from '@/model/model'\nimport Utils from '@/utils/Utils'\n\ninterface AccountsWidgetData {\n    accountCreationFormIsDisplayed: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountsWidget',\n  components: {\n    AccountCreationForm\n  },\n  data (): AccountsWidgetData {\n    return {\n      accountCreationFormIsDisplayed: false\n    }\n  },\n  computed: {\n    totalOnAccounts (): number {\n      let total = 0\n      for (const account of this.$store.state.accounts) {\n        total += account.amount\n      }\n      return total\n    }\n  },\n  methods: {\n    goToAccountPage (account: Account) {\n      router.push({ path: RouterPages.account, query: { accountId: account.id } })\n    },\n    changeAccountCreationFormDisplay () {\n      this.$data.accountCreationFormIsDisplayed = !this.$data.accountCreationFormIsDisplayed\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n</script>\n","<template>\n  <div id=\"accountCreationForm\">\n    <label for=\"newAccountName\">{{ $t('ACCOUNT_NAME') }}</label>\n    <input id=\"newAccountName\" class=\"form-control\" v-model=\"name\" :placeholder=\"$t('CHECKING_ACCOUNT')\">\n    <label for=\"newAccountAmount\">{{ $t('INITIAL_AMOUNT') }}</label>\n    <input id=\"newAccountAmount\" class=\"form-control\" v-model.number=\"amount\">\n    <button class=\"btn\" v-on:click=\"createAccount\">{{$t('CREATE_ACCOUNT')}}</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport AccountService from '@/services/AccountService'\nimport Utils from '@/utils/Utils'\n\nexport default defineComponent({\n  name: 'AccountCreationForm',\n  data () {\n    return {\n      name: '',\n      amount: 0\n    }\n  },\n  emits: ['updateAccountList', 'closeForm'],\n  methods: {\n    createAccount () {\n      if (this.$store.state.budget) {\n        AccountService.createAccount(this.$store, this.$store.state.budget, this.name, Utils.getCentsAmount(this.amount)).then(\n          () => {\n            this.$emit('updateAccountList')\n            this.$emit('closeForm')\n          }\n        )\n      }\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport AccountService from '@/services/AccountService'\nimport Utils from '@/utils/Utils'\n\nexport default defineComponent({\n  name: 'AccountCreationForm',\n  data () {\n    return {\n      name: '',\n      amount: 0\n    }\n  },\n  emits: ['updateAccountList', 'closeForm'],\n  methods: {\n    createAccount () {\n      if (this.$store.state.budget) {\n        AccountService.createAccount(this.$store, this.$store.state.budget, this.name, Utils.getCentsAmount(this.amount)).then(\n          () => {\n            this.$emit('updateAccountList')\n            this.$emit('closeForm')\n          }\n        )\n      }\n    }\n  }\n})\n","import { render } from \"./AccountCreationForm.vue?vue&type=template&id=359f1d1f\"\nimport script from \"./AccountCreationForm.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountCreationForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport AccountCreationForm from '@/components/forms/AccountCreationForm.vue'\nimport router, { RouterPages } from '@/router'\nimport { Account } from '@/model/model'\nimport Utils from '@/utils/Utils'\n\ninterface AccountsWidgetData {\n    accountCreationFormIsDisplayed: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountsWidget',\n  components: {\n    AccountCreationForm\n  },\n  data (): AccountsWidgetData {\n    return {\n      accountCreationFormIsDisplayed: false\n    }\n  },\n  computed: {\n    totalOnAccounts (): number {\n      let total = 0\n      for (const account of this.$store.state.accounts) {\n        total += account.amount\n      }\n      return total\n    }\n  },\n  methods: {\n    goToAccountPage (account: Account) {\n      router.push({ path: RouterPages.account, query: { accountId: account.id } })\n    },\n    changeAccountCreationFormDisplay () {\n      this.$data.accountCreationFormIsDisplayed = !this.$data.accountCreationFormIsDisplayed\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    }\n  }\n})\n","import { render } from \"./AccountsWidget.vue?vue&type=template&id=50b363b3\"\nimport script from \"./AccountsWidget.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountsWidget.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { personApi } from '@/services/api/apis'\nimport router, { RouterPages, redirectToLoginPageIfUnauthorizedError, redirectToLoginPageIfNotLogged } from '@/router'\nimport axios from 'axios'\n\ninterface LoginResponse {\n    name: string;\n    unlockingDate: number;\n}\n\nexport default class PersonService {\n  public static async createSession (store: Store<StoreState>, email: string, password: string): Promise<LoginResponse> {\n    let data\n    let response\n    try {\n      response = await personApi.createSession(email, password)\n      data = response.data\n      store.dispatch('updateLogged')\n      router.push(RouterPages.home)\n    } catch (exception) {\n      if (axios.isAxiosError(exception)) {\n        response = exception.response\n        data = (response) ? response.data : {}\n      }\n    }\n    return JSON.parse(data)\n  }\n\n  public static async createPerson (store: Store<StoreState>, name: string, email: string, password: string): Promise<LoginResponse> {\n    let data\n    let response\n    try {\n      response = await personApi.createPerson(name, password, email)\n      response = await personApi.createSession(email, password)\n      data = response.data\n    } catch (exception) {\n      if (axios.isAxiosError(exception)) {\n        response = exception.response\n        data = (response) ? response.data : {}\n      }\n    }\n    return JSON.parse(data)\n  }\n\n  public static async deleteSession (store: Store<StoreState>) {\n    const response = await personApi.deleteSession()\n    redirectToLoginPageIfUnauthorizedError(response)\n    store.dispatch('updateLogged')\n    redirectToLoginPageIfNotLogged(store)\n  }\n}\n","<template>\n  <div class=\"image-spinner\">\n    <img src=\"@/assets/logo_round.png\"/>\n    <div class=\"spin spinner\"></div>\n    <div>{{$t('LOADING')}}</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LoaderCmpt'\n})\n</script>\n","\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LoaderCmpt'\n})\n","import { render } from \"./Loader.vue?vue&type=template&id=2a375deb\"\nimport script from \"./Loader.vue?vue&type=script&lang=ts\"\nexport * from \"./Loader.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport StoreHandler from '@/store/StoreHandler'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport BudgetCmpt from '@/components/BudgetCmpt.vue' // @ is an alias to /src\nimport AccountsWidget from '@/components/AccountsWidget.vue'\nimport PersonService from '@/services/PersonService'\nimport Time from '@/utils/Time'\nimport Loader from '@/components/utils/Loader.vue'\n\nexport default defineComponent({\n  name: 'Home',\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n  },\n  components: {\n    BudgetCmpt,\n    AccountsWidget,\n    Loader\n  },\n  data () {\n    return {\n      currentMonth: Time.getCurrentMonth()\n    }\n  },\n  methods: {\n    logout () {\n      PersonService.deleteSession(this.$store)\n    }\n  }\n})\n","import { render } from \"./Home.vue?vue&type=template&id=65ba84f1\"\nimport script from \"./Home.vue?vue&type=script&lang=ts\"\nexport * from \"./Home.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div id=\"login_page\">\n    <img id=\"logo\" alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <input class=\"form-control\" v-model=\"email\" :placeholder=\"$t('EMAIL')\">\n    <input class=\"form-control\" type=\"password\" v-model=\"password\" :placeholder=\"$t('PASSWORD')\">\n    <button class=\"btn btn-info\" v-on:click=\"login\">{{$t('LOGIN')}}</button>\n    <p id=\"login_error_msg\">{{errorMsg}}</p>\n    <p><a class=\"teamSelector\" v-on:click=\"goToSignUp\">{{$t('CREATE_ACCOUNT_HERE')}}</a></p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\nimport router, { RouterPages } from '@/router'\n\nexport default defineComponent({\n  name: 'Login',\n  components: {},\n  data () {\n    return {\n      email: '',\n      password: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async login () {\n      const responseData = await PersonService.createSession(this.$store, this.email, this.password)\n      if (responseData.unlockingDate !== null) {\n        const minutes = 1000 * 60\n        const lockingDuration = Math.round((responseData.unlockingDate - new Date().getTime()) / minutes)\n        if (lockingDuration > 0) {\n          this.$data.errorMsg = this.$t('SORRY_LOCKED_OUT', { lockingDuration: lockingDuration })\n        } else {\n          this.$data.errorMsg = this.$t('SORRY_WRONG_PASSWORD')\n        }\n      } else {\n        this.$data.errorMsg = this.$t('SORRY_WRONG_LOGIN')\n      }\n    },\n    async goToSignUp (): Promise<void> {\n      router.push(RouterPages.signup)\n    }\n  }\n\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n#logo {\n  height: 80px;\n}\n</style>\n","\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\nimport router, { RouterPages } from '@/router'\n\nexport default defineComponent({\n  name: 'Login',\n  components: {},\n  data () {\n    return {\n      email: '',\n      password: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async login () {\n      const responseData = await PersonService.createSession(this.$store, this.email, this.password)\n      if (responseData.unlockingDate !== null) {\n        const minutes = 1000 * 60\n        const lockingDuration = Math.round((responseData.unlockingDate - new Date().getTime()) / minutes)\n        if (lockingDuration > 0) {\n          this.$data.errorMsg = this.$t('SORRY_LOCKED_OUT', { lockingDuration: lockingDuration })\n        } else {\n          this.$data.errorMsg = this.$t('SORRY_WRONG_PASSWORD')\n        }\n      } else {\n        this.$data.errorMsg = this.$t('SORRY_WRONG_LOGIN')\n      }\n    },\n    async goToSignUp (): Promise<void> {\n      router.push(RouterPages.signup)\n    }\n  }\n\n})\n","import { render } from \"./Login.vue?vue&type=template&id=db8d7caa&scoped=true\"\nimport script from \"./Login.vue?vue&type=script&lang=ts\"\nexport * from \"./Login.vue?vue&type=script&lang=ts\"\n\nimport \"./Login.vue?vue&type=style&index=0&id=db8d7caa&scoped=true&lang=less\"\nscript.render = render\nscript.__scopeId = \"data-v-db8d7caa\"\n\nexport default script","<template>\n  <div id=\"sign_up_page\">\n    <img id=\"logo\" alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <div>\n      <label for=\"name\">{{$t('NAME')}}</label>\n      <input class=\"form-control\" type=\"text\" id=\"name\" v-model=\"name\" :placeholder=\"$t('NAME')\">\n      <label for=\"email\">{{$t('EMAIL')}}</label>\n      <input class=\"form-control\" id=\"email\" v-model=\"email\" :placeholder=\"$t('EMAIL')\">\n      <label for=\"password\">{{$t('PASSWORD')}}</label>\n      <input class=\"form-control\" type=\"password\" id=\"password\" v-model=\"password\" :placeholder=\"$t('PASSWORD')\">\n      <label for=\"password\">{{$t('CONFIRM_PASSWORD')}}</label>\n      <input class=\"form-control\" type=\"password\" id=\"passwordConfirm\" v-model=\"passwordConfirm\" :placeholder=\"$t('PASSWORD')\">\n      <button class=\"btn btn-info\" v-on:click=\"create\">{{$t('CREATE')}}</button>\n      <p id=\"login_error_msg\">{{errorMsg}}</p>\n      <p><a class=\"teamSelector\" v-on:click=\"goToLogin\">{{$t('RETURN_TO_LOGIN')}}</a></p>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\nimport router, { RouterPages } from '@/router'\n\nexport default defineComponent({\n  name: 'Signup',\n  components: {},\n  data () {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async create () {\n      if (this.testForm()) {\n        const responseData = PersonService.createPerson(this.$store, this.name, this.email, this.password)\n      }\n    },\n    testForm (): boolean {\n      // regex verify email have an email form\n      const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n      if (this.password !== this.passwordConfirm) {\n        this.$data.errorMsg = this.$t('DIFFERENT_PASSWORDS')\n        return false\n      }\n      if (!this.passwordCheckSecurity(this.password)) {\n        this.$data.errorMsg = this.$t('LESS_SECURITY')\n        return false\n      }\n      if (!this.email.match(regex)) {\n        this.$data.errorMsg = this.$t('INVALID_EMAIL')\n        return false\n      }\n      if (this.name === '') {\n        this.$data.errorMsg = this.$t('EMPTY_NAME')\n        return false\n      }\n      return true\n    },\n    passwordCheckSecurity (password: string): boolean {\n      // regExp verify password is enought complex (more than 8 caracters, with lower and capital letter and with special caracter !@#$%&*())\n      const regExp = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]).{8,}/\n      const validPassword = regExp.test(password)\n      return validPassword\n    },\n    async goToLogin (): Promise<void> {\n      router.push(RouterPages.login)\n    }\n  }\n\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n#logo {\n  height: 80px;\n}\n</style>\n","\nimport { defineComponent } from 'vue'\nimport PersonService from '@/services/PersonService'\nimport router, { RouterPages } from '@/router'\n\nexport default defineComponent({\n  name: 'Signup',\n  components: {},\n  data () {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      errorMsg: ''\n    }\n  },\n  computed: {\n    logged (): boolean {\n      return this.$store.state.logged\n    }\n  },\n  methods: {\n    async create () {\n      if (this.testForm()) {\n        const responseData = PersonService.createPerson(this.$store, this.name, this.email, this.password)\n      }\n    },\n    testForm (): boolean {\n      // regex verify email have an email form\n      const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n      if (this.password !== this.passwordConfirm) {\n        this.$data.errorMsg = this.$t('DIFFERENT_PASSWORDS')\n        return false\n      }\n      if (!this.passwordCheckSecurity(this.password)) {\n        this.$data.errorMsg = this.$t('LESS_SECURITY')\n        return false\n      }\n      if (!this.email.match(regex)) {\n        this.$data.errorMsg = this.$t('INVALID_EMAIL')\n        return false\n      }\n      if (this.name === '') {\n        this.$data.errorMsg = this.$t('EMPTY_NAME')\n        return false\n      }\n      return true\n    },\n    passwordCheckSecurity (password: string): boolean {\n      // regExp verify password is enought complex (more than 8 caracters, with lower and capital letter and with special caracter !@#$%&*())\n      const regExp = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]).{8,}/\n      const validPassword = regExp.test(password)\n      return validPassword\n    },\n    async goToLogin (): Promise<void> {\n      router.push(RouterPages.login)\n    }\n  }\n\n})\n","import { render } from \"./Signup.vue?vue&type=template&id=5cd6e35c&scoped=true\"\nimport script from \"./Signup.vue?vue&type=script&lang=ts\"\nexport * from \"./Signup.vue?vue&type=script&lang=ts\"\n\nimport \"./Signup.vue?vue&type=style&index=0&id=5cd6e35c&scoped=true&lang=less\"\nscript.render = render\nscript.__scopeId = \"data-v-5cd6e35c\"\n\nexport default script","<template >\n  <div :class=\"this.$store.state.css\">\n    <div class=\"accountPage row col-lg-10 offset-lg-1 col-xl-8 offset-xl-2\">\n      <div v-if=\"this.editingTitle\" class=\"row\">\n        <span class=\"name col-4 offset-4\">\n            <input id=\"accountName\" class=\"form-control\" :placeholder=this.currentName v-model=\"name\">\n        </span>\n        <span class=\"validation col\">\n           <button class=\"btn fas fa-check\" v-on:click=\"updateName()\"/>\n           <button class=\"btn fas fa-times\" v-on:click=\"this.cancelEditing()\"/>\n        </span>\n      </div>\n      <div v-else class=\"editableNameAccount\">\n        <a v-on:click=\"this.displayTitleEditing()\">\n          <h1>\n            {{ this.account ? this.account.name : \"\" }} :\n            {{ this.account ? getEurosAmount(this.account.amount) : \"\" }}€\n          </h1>\n            <button class=\"btn fas fa-pen\" />\n        </a>\n      </div>\n      <div class=\"operationTable table-hover\">\n          <OperationForm\n            class=\"operationCreate\"\n            @update-operation-list=\"getAccountOperation\"\n            :accountId=\"this.accountId\"\n          />\n          <template v-for=\"operation in this.operations\" :key=\"operation\">\n            <OperationForm\n              v-if=\"operation.editing\"\n              @update-operation-list=\"getAccountOperation\"\n              :accountId=\"this.accountId\"\n              :operation=\"operation\"\n            />\n            <div class=\"operation storedOperation v-else\">\n              <div class=\"date col-2 offset-1\">\n                <div>{{ $d(this.getDayAsDate(operation.day), \"day\") }}</div>\n              </div>\n              <div class=\"col-8\"></div>\n              <div class=\"category col-3 offset-1\">\n                {{\n                  this.getCategoryById(operation.categoryId)?.name ??\n                  $t(\"UNKNOWN_CATEGORY\")\n                }}\n              </div>\n              <div class=\"amount col-2 offset-2\">\n                {{ this.getEurosAmount(operation.amount) }} €\n              </div>\n              <div class=\"action col-1 offset-1\">\n                <button\n                  class=\"btn fas fa-pen\"\n                  v-on:click=\"setAsEditing(operation)\"\n                  :title=\"$t('EDIT')\"\n                />\n                <button\n                  class=\"btn fas fa-trash\"\n                  v-on:click=\"deleteOperation(operation)\"\n                  :title=\"$t('DELETE')\"\n                />\n              </div>\n              <div class=\"memo col-3 offset-1\">{{ operation.memo }}</div>\n            </div>\n          </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport { Account, Category, Operation } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport OperationService from '@/services/OperationService'\nimport AccountService from '@/services/AccountService'\nimport OperationForm from '@/components/forms/OperationForm.vue'\nimport Utils from '@/utils/Utils'\n\ninterface AccountPageData {\n    operations: EditableOperation[];\n    name: string;\n    editingTitle: boolean;\n}\n\ninterface EditableOperation extends Operation {\n  editing: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountPage',\n  components: {\n    OperationForm\n  },\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n    this.getAccountOperation()\n  },\n  watch: {\n    account: async function () {\n      this.getAccountOperation()\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    }\n  },\n  data (): AccountPageData {\n    return {\n      operations: [],\n      name: '',\n      editingTitle: false\n    }\n  },\n  computed: {\n    account (): Account | null {\n      for (const account of this.$store.state.accounts) {\n        if (account.id === this.accountId) {\n          return account\n        }\n      }\n      return null\n    },\n    currentName (): string {\n      return this.account?.name || ''\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    async getAccountOperation () {\n      if (this.account) {\n        return OperationService.getOperations(this.account).then(\n          (operations) => {\n            this.operations = this.operationToEditableOperation(operations)\n          }\n        )\n      }\n    },\n    getDayAsDate (dayAsInt: number): Date {\n      return Time.getDateFromDay(dayAsInt)\n    },\n    deleteOperation (operation: Operation) {\n      OperationService.deleteOperation(this.$store, operation).then(() => {\n        this.getAccountOperation()\n      })\n    },\n    setAsEditing (operation: EditableOperation) {\n      operation.editing = true\n    },\n    operationToEditableOperation (operations: Operation[]): EditableOperation[] {\n      const editableOperations: EditableOperation[] = []\n      operations.forEach((operation) =>\n        editableOperations.push({\n          id: operation.id,\n          day: operation.day,\n          accountId: operation.accountId,\n          categoryId: operation.categoryId,\n          amount: operation.amount,\n          memo: operation.memo,\n          editing: false\n        })\n      )\n      return editableOperations\n    },\n    getCategoryById (categoryId: string): Category | null {\n      return StoreHandler.getCategoryById(this.$store, categoryId)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    updateName () {\n      AccountService.updateAccount(this.$store, this.accountId, this.name)\n      this.editingTitle = false\n    },\n    displayTitleEditing () {\n      this.editingTitle = true\n    },\n    cancelEditing () {\n      this.editingTitle = false\n    }\n  }\n})\n</script>\n","import { Account, Operation } from '@/model/model'\nimport { operationApi } from '@/services/api/apis'\nimport StoreHandler from '@/store/StoreHandler'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { redirectToLoginPageIfUnauthorizedError } from '@/router'\n\nexport default class OperationService {\n  public static async getOperations (account: Account): Promise<Operation[]> {\n    let data: Operation[] = []\n    if (account.id) {\n      const response = await operationApi.findOperationsByAccount(account.id)\n      redirectToLoginPageIfUnauthorizedError(response)\n      data = response.data\n    }\n    return data\n  }\n\n  public static async addOperation (store: Store<StoreState>, accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string) {\n    const response = await operationApi.addOperation(accountId, day, categoryId, amount, memo)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n\n  public static async deleteOperation (store: Store<StoreState>, operation: Operation) {\n    const response = await operationApi.deleteOperation(operation.id)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n\n  public static async updateOperation (store: Store<StoreState>, operation: Operation, accountId: string, day?: number, categoryId?: string, amount?: number, memo?: string) {\n    const response = await operationApi.updateOperation(operation.id, accountId, day, categoryId, amount, memo)\n    redirectToLoginPageIfUnauthorizedError(response)\n    StoreHandler.updateAccounts(store)\n  }\n}\n","<template>\n<div id=\"operationForm\" class=\"operation\">\n    <div class=\"dateTitle col-3 offset-1 col-sm-2 offset-sm-2 col-md-1 offset-md-1 col-lg-1 offset-lg-1 col-xl-1 offset-xl-1 col-xxl-1 offset-xxl-1\">{{ $t(\"DATE\") }}</div>\n    <div class=\"dateElement col-6 col-sm-5 col-md-3 col-lg-3 col-xl-3 col-xxl-2\"><input id=\"newOperationDate\" type=\"date\" class=\"form-control\" v-model=\"date\"></div>\n    <div class=\"categoryTitle col-3 offset-1 col-sm-2 offset-sm-2 col-md-2 offset-md-1 col-lg-2 offset-lg-1 col-xl-2 offset-xl-1 col-xxl-2 offset-xxl-1\">{{ $t(\"CATEGORY\") }}</div>\n    <div class=\"categoryElement col-6 col-sm-5 col-md-3 col-lg-3 col-xl-3 col-xxl-4\">\n      <select id=\"newOperationCategory\" class=\"form-control\" v-model=\"categoryId\" >\n        <option disabled value=\"\">{{$t('SELECT_CATEGORY')}}</option>\n        <option v-bind:value=\"incomeCategoryId\">{{$t('I18N_INCOME')}}</option>\n        <option v-bind:value=\"transfertCategoryId\">{{$t('I18N_TRASNFERT')}}</option>\n        <optgroup v-for=\"masterCategory of this.$store.state.masterCategories\" :key=\"masterCategory\" v-bind:value=\"masterCategory.id\" :label=\"masterCategory.name\">\n          <option v-for=\"category of this.getCategoriesByMasterCategory(masterCategory)\" :key=\"category\" v-bind:value=\"category.id\">{{category.name}}</option>\n        </optgroup>\n        <optgroup :label=\"$t('ARCHIVED_CATEGORIES')\">\n          <option v-for=\"category of this.getArchivedCategories()\" :key=\"category\" v-bind:value=\"category.id\">{{category.name}}</option>\n        </optgroup>\n      </select>\n    </div>\n    <div class=\"memoTitle col-3 offset-1 col-sm-2 offset-sm-2 col-md-1 offset-md-1 col-lg-1 offset-lg-1 col-xl-1 offset-xl-1 col-xxl-1 offset-xxl-1\">{{ $t(\"MEMO\") }}</div>\n    <div class=\"memoElement col-6 col-sm-5 col-md-3 col-lg-3 col-xl-3 col-xxl-2\"><input id=\"newOperationMemo\" class=\"form-control\" v-model=\"memo\"></div>\n    <div class=\"amountTitle col-3 offset-1 col-sm-2 offset-sm-2 col-md-2 offset-md-1 col-lg-2 offset-lg-1 col-xl-2 offset-xl-1 col-xxl-2 offset-xxl-1\">{{ $t(\"AMOUNT\") }}</div>\n    <div class=\"amountElement col-6 col-sm-5 col-md-3 col-lg-3 col-xl-3 col-xxl-4\"><div class=\"input-group flex-nowrap\">\n      <label class=\"switch\">\n        <input class=\"switch-input\" type=\"checkbox\" v-model=\"incoming\"/>\n          <span class=\"switch-label\" data-on=\"+\" data-off=\"-\" style=\"border-radius: 8px\"></span>\n          <span class=\"switch-handle\"></span>\n      </label>\n        <input id=\"newOperationAmount\" class=\"form-control\" v-model.number=\"amount\">\n    </div>\n    </div>\n  <div class=\"action col-1 offset-6\">\n    <button v-if=\"this.operation\" class=\"btn fas fa-check\" v-on:click=\"updateOperation\" :title=\"$t('UPDATE')\"/>\n    <button v-else class=\"btn fas fa-check\" v-on:click=\"addOperation\" :title=\"$t('ADD')\"/>\n  </div>\n</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport OperationService from '@/services/OperationService'\nimport { Category, MasterCategory, Operation, incomeCategoryId, transfertCategoryId } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport Utils from '@/utils/Utils'\n\ninterface OperationFormData {\n  date: string;\n  categoryId: string;\n  memo: string;\n  incoming: boolean;\n  amount: number;\n}\n\nexport default defineComponent({\n  name: 'OperationForm',\n  data (): OperationFormData {\n    return {\n      date: this.operation ? Time.getDateStringFromDay(this.operation.day) : Time.getCurrentDateString(),\n      categoryId: this.operation?.categoryId || '',\n      memo: this.operation?.memo || '',\n      incoming: this.operation?.amount ? this.operation.amount > 0 : false,\n      amount: Utils.getEurosAmount(Math.abs(this.operation?.amount || 0))\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    },\n    operation: {\n      type: Object as () => Operation\n    }\n  },\n  computed: {\n    incomeCategoryId (): string {\n      return incomeCategoryId\n    },\n    transfertCategoryId (): string {\n      return transfertCategoryId\n    },\n    signedCentsAmount (): number {\n      return Utils.getCentsAmount((this.incoming) ? Math.abs(this.amount) : Math.abs(this.amount) * -1)\n    }\n  },\n  emits: ['updateOperationList'],\n  methods: {\n    updateOperation () {\n      if (this.operation) {\n        OperationService.updateOperation(this.$store, this.operation, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n          () => {\n            this.$emit('updateOperationList')\n          }\n        )\n      } else {\n        console.log('warning: tried to update without operation to update')\n      }\n    },\n    addOperation () {\n      OperationService.addOperation(this.$store, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n        () => {\n          this.$emit('updateOperationList')\n        }\n      )\n    },\n    getCategoriesByMasterCategory (masterCategory: MasterCategory): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, masterCategory, false)\n    },\n    getArchivedCategories (): Category[] {\n      return StoreHandler.getCategoriesByArchivedStatus(this.$store, true)\n    }\n  }\n})\n</script>\n","\nimport { defineComponent } from 'vue'\nimport OperationService from '@/services/OperationService'\nimport { Category, MasterCategory, Operation, incomeCategoryId, transfertCategoryId } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport Utils from '@/utils/Utils'\n\ninterface OperationFormData {\n  date: string;\n  categoryId: string;\n  memo: string;\n  incoming: boolean;\n  amount: number;\n}\n\nexport default defineComponent({\n  name: 'OperationForm',\n  data (): OperationFormData {\n    return {\n      date: this.operation ? Time.getDateStringFromDay(this.operation.day) : Time.getCurrentDateString(),\n      categoryId: this.operation?.categoryId || '',\n      memo: this.operation?.memo || '',\n      incoming: this.operation?.amount ? this.operation.amount > 0 : false,\n      amount: Utils.getEurosAmount(Math.abs(this.operation?.amount || 0))\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    },\n    operation: {\n      type: Object as () => Operation\n    }\n  },\n  computed: {\n    incomeCategoryId (): string {\n      return incomeCategoryId\n    },\n    transfertCategoryId (): string {\n      return transfertCategoryId\n    },\n    signedCentsAmount (): number {\n      return Utils.getCentsAmount((this.incoming) ? Math.abs(this.amount) : Math.abs(this.amount) * -1)\n    }\n  },\n  emits: ['updateOperationList'],\n  methods: {\n    updateOperation () {\n      if (this.operation) {\n        OperationService.updateOperation(this.$store, this.operation, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n          () => {\n            this.$emit('updateOperationList')\n          }\n        )\n      } else {\n        console.log('warning: tried to update without operation to update')\n      }\n    },\n    addOperation () {\n      OperationService.addOperation(this.$store, this.accountId, Time.getDayFromDateString(this.date), this.categoryId, this.signedCentsAmount, this.memo).then(\n        () => {\n          this.$emit('updateOperationList')\n        }\n      )\n    },\n    getCategoriesByMasterCategory (masterCategory: MasterCategory): Category[] {\n      return StoreHandler.getCategoriesByMasterCategory(this.$store, masterCategory, false)\n    },\n    getArchivedCategories (): Category[] {\n      return StoreHandler.getCategoriesByArchivedStatus(this.$store, true)\n    }\n  }\n})\n","import { render } from \"./OperationForm.vue?vue&type=template&id=68fe9fc5\"\nimport script from \"./OperationForm.vue?vue&type=script&lang=ts\"\nexport * from \"./OperationForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\nimport { redirectToLoginPageIfNotLogged } from '@/router'\nimport { Account, Category, Operation } from '@/model/model'\nimport Time from '@/utils/Time'\nimport StoreHandler from '@/store/StoreHandler'\nimport OperationService from '@/services/OperationService'\nimport AccountService from '@/services/AccountService'\nimport OperationForm from '@/components/forms/OperationForm.vue'\nimport Utils from '@/utils/Utils'\n\ninterface AccountPageData {\n    operations: EditableOperation[];\n    name: string;\n    editingTitle: boolean;\n}\n\ninterface EditableOperation extends Operation {\n  editing: boolean;\n}\n\nexport default defineComponent({\n  name: 'AccountPage',\n  components: {\n    OperationForm\n  },\n  beforeCreate: async function () {\n    redirectToLoginPageIfNotLogged(this.$store)\n  },\n  created: async function () {\n    StoreHandler.initStore(this.$store)\n    this.getAccountOperation()\n  },\n  watch: {\n    account: async function () {\n      this.getAccountOperation()\n    }\n  },\n  props: {\n    accountId: {\n      type: String,\n      required: true\n    }\n  },\n  data (): AccountPageData {\n    return {\n      operations: [],\n      name: '',\n      editingTitle: false\n    }\n  },\n  computed: {\n    account (): Account | null {\n      for (const account of this.$store.state.accounts) {\n        if (account.id === this.accountId) {\n          return account\n        }\n      }\n      return null\n    },\n    currentName (): string {\n      return this.account?.name || ''\n    }\n  },\n  emits: ['loosesFocus'],\n  methods: {\n    async getAccountOperation () {\n      if (this.account) {\n        return OperationService.getOperations(this.account).then(\n          (operations) => {\n            this.operations = this.operationToEditableOperation(operations)\n          }\n        )\n      }\n    },\n    getDayAsDate (dayAsInt: number): Date {\n      return Time.getDateFromDay(dayAsInt)\n    },\n    deleteOperation (operation: Operation) {\n      OperationService.deleteOperation(this.$store, operation).then(() => {\n        this.getAccountOperation()\n      })\n    },\n    setAsEditing (operation: EditableOperation) {\n      operation.editing = true\n    },\n    operationToEditableOperation (operations: Operation[]): EditableOperation[] {\n      const editableOperations: EditableOperation[] = []\n      operations.forEach((operation) =>\n        editableOperations.push({\n          id: operation.id,\n          day: operation.day,\n          accountId: operation.accountId,\n          categoryId: operation.categoryId,\n          amount: operation.amount,\n          memo: operation.memo,\n          editing: false\n        })\n      )\n      return editableOperations\n    },\n    getCategoryById (categoryId: string): Category | null {\n      return StoreHandler.getCategoryById(this.$store, categoryId)\n    },\n    getEurosAmount (amount: number): number {\n      return Utils.getEurosAmount(amount)\n    },\n    updateName () {\n      AccountService.updateAccount(this.$store, this.accountId, this.name)\n      this.editingTitle = false\n    },\n    displayTitleEditing () {\n      this.editingTitle = true\n    },\n    cancelEditing () {\n      this.editingTitle = false\n    }\n  }\n})\n","import { render } from \"./AccountPage.vue?vue&type=template&id=4faed289\"\nimport script from \"./AccountPage.vue?vue&type=script&lang=ts\"\nexport * from \"./AccountPage.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Login from '../views/Login.vue'\nimport Signup from '../views/Signup.vue'\nimport AccountPage from '../views/AccountPage.vue'\nimport { StoreState } from '@/store/index'\nimport { Store } from 'vuex'\nimport { AxiosResponse } from 'axios'\n\nexport enum RouterPages {\n  home = '/',\n  login = '/login',\n  signup = '/signup',\n  account = '/account',\n  about = '/about'\n}\n\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: RouterPages.home,\n    component: Home\n  },\n  {\n    path: RouterPages.login,\n    component: Login\n  },\n  {\n    path: RouterPages.signup,\n    component: Signup\n  },\n  {\n    path: RouterPages.account,\n    component: AccountPage,\n    props: route => ({ accountId: route.query.accountId })\n  },\n  {\n    path: RouterPages.about,\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/About.vue')\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport function redirectToLoginPageIfNotLogged (store: Store<StoreState>) {\n  if (!store.state.logged) {\n    router.push(RouterPages.login)\n  }\n}\n\nexport function redirectToLoginPageIfUnauthorizedError (response: AxiosResponse) {\n  if (response.status === 401) {\n    router.push(RouterPages.login)\n  }\n}\n\nexport default router\n","import { InjectionKey } from 'vue'\nimport { createStore, Store, useStore as baseUseStore } from 'vuex'\nimport SuperTokensRequest from 'supertokens-website/axios'\nimport { Budget, Account, Category, MasterCategory } from '@/model/model'\nimport StoreHandler from './StoreHandler'\n\nexport interface StoreState {\n  logged: boolean;\n  budget: Budget | null;\n  accounts: Account[];\n  categories: Category[];\n  masterCategories: MasterCategory[];\n  css: string;\n  storeLoaded: boolean;\n}\n\nexport const key: InjectionKey<Store<StoreState>> = Symbol('injectionKey')\n\nexport const store = createStore<StoreState>({\n  state: {\n    logged: SuperTokensRequest.doesSessionExist(),\n    budget: null,\n    accounts: [],\n    categories: [],\n    masterCategories: [],\n    css: 'default',\n    storeLoaded: false\n  },\n  mutations: {\n    updateLogged (state) {\n      state.logged = SuperTokensRequest.doesSessionExist()\n      if (state.logged) {\n        StoreHandler.initStore(store)\n      } else {\n        StoreHandler.resetStore(store)\n      }\n    },\n    updateBudget (state, budget: Budget) {\n      if (budget !== state.budget) {\n        state.budget = budget\n        StoreHandler.updateOnBudgetChange(store)\n      }\n    },\n    updateAccounts (state, accounts: Account[]) {\n      state.accounts = accounts\n    },\n    updateCategories (state, categories: Category[]) {\n      state.categories = categories.sort((a, b) => (a.name.toLowerCase() <= b.name.toLowerCase() ? -1 : 1))\n    },\n    updateMasterCategories (state, masterCategories: MasterCategory[]) {\n      state.masterCategories = masterCategories.sort((a, b) => (a.name.toLowerCase() <= b.name.toLowerCase() ? -1 : 1))\n    },\n    updateStoreLoaded (state, storeLoaded: boolean) {\n      state.storeLoaded = storeLoaded\n    }\n  },\n  actions: {\n    updateLogged (context) {\n      context.commit('updateLogged')\n    },\n    updateBudget (context, budget: Budget) {\n      context.commit('updateBudget', budget)\n    },\n    updateAccounts (context, accounts: Account[]) {\n      context.commit('updateAccounts', accounts)\n    },\n    updateCategories (context, categories: Category[]) {\n      context.commit('updateCategories', categories)\n    },\n    updateMasterCategories (context, masterCategories: MasterCategory[]) {\n      context.commit('updateMasterCategories', masterCategories)\n    },\n    updateStoreLoaded (context, storeLoaded: boolean) {\n      context.commit('updateStoreLoaded', storeLoaded)\n    }\n  },\n  modules: {\n  }\n})\n\nexport function useStore (): Store<StoreState> {\n  return baseUseStore(key)\n}\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './registerServiceWorker'\nimport router from './router'\nimport { store, key } from './store'\nimport 'bootstrap'\nimport { createI18n } from 'vue-i18n'\nimport localeFR from '@/assets/locale/fr.json'\nimport localeEN from '@/assets/locale/en.json'\nimport localeDate from '@/assets/locale/dateformat.json'\nimport Properties from '@/../properties'\n\nconst messages = {\n  fr: localeFR,\n  en: localeEN\n}\n\nconst i18n = createI18n({ locale: 'fr', fallbackLocale: 'en', messages: messages, datetimeFormats: localeDate })\nconsole.log('version : ' + Properties.commitHash)\ncreateApp(App).use(store, key).use(router).use(i18n).mount('#app')\n","module.exports = __webpack_public_path__ + \"img/logo.0ca28574.png\";"],"sourceRoot":""}